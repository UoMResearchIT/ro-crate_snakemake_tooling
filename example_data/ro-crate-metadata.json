{
  "@context": "https://w3id.org/ro/crate/1.1/context",
  "@graph": [
    {
      "@id": "ro-crate-metadata.json",
      "@type": "CreativeWork",
      "about": {
        "@id": "./"
      },
      "conformsTo": [
        {
          "@id": "https://w3id.org/ro/crate/1.1"
        },
        {
          "@id": "https://about.workflowhub.eu/Workflow-RO-Crate/"
        }
      ]
    },
    {
      "@id": "ro-crate-preview.html",
      "@type": "CreativeWork",
      "about": {
        "@id": "./"
      }
    },
    {
      "@id": "./",
      "@type": "Dataset",
      "mainEntity": {
        "@id": "workflow/Snakefile"
      },
      "author": [

      ],
      "license": "MIT",
      "identifier": "https://workflowhub.eu/workflows/791?version=1",
      "url": "https://workflowhub.eu/workflows/791/ro_crate?version=1",
      "name": "Research Object Crate for skim2mt",
      "description": "# skim2mt\r\n\r\n**skim2mt** is a snakemake pipeline for the batch assembly, annotation, and phylogenetic analysis of mitochondrial genomes from low coverage genome skims. The pipeline was designed to work with sequence data from museum collections. However, it should also work with genome skims from recently collected samples.\r\n\r\n## Contents\r\n - [Setup](#setup)\r\n - [Example data](#example-data)\r\n - [Input](#input)\r\n - [Output](#output)\r\n - [Filtering contaminants](#filtering-contaminants)\r\n - [Assembly and annotation only](#assembly-and-annotation-only)\r\n - [Running your own data](#running-your-own-data)\r\n - [Getting help](#getting-help)\r\n - [Citations](#citations)\r\n\r\n## Setup\r\n\r\nThe pipeline is written in Snakemake and uses conda and singularity to install the necessary tools.\r\n\r\nIt is *strongly recommended* to install conda using Mambaforge. See details here https://snakemake.readthedocs.io/en/stable/getting_started/installation.html\r\n\r\nOnce conda is installed, you can pull the github repo and set up the base conda environment.\r\n\r\n```\r\n# get github repo\r\ngit clone https://github.com/o-william-white/skim2mt\r\n\r\n# change dir\r\ncd skim2mt\r\n\r\n# setup conda env\r\nconda env create -n snakemake -f workflow/envs/conda_env.yaml\r\n```\r\n\r\n<br>\r\n<div>\r\n    <b><a href=\"#skim2mt\">↥ back to top</a></b>\r\n</div>\r\n<br>\r\n\r\n## Example data\r\n\r\nBefore you run your own data, it is recommended to run the example datasets provided . This will confirm there are no user-specific issues with the setup and it also installs all the dependencies. The example data includes simulated mitochondrial data from 25 different butterfly species. \r\n\r\nTo run the example data, use the code below. **Note that you need to change the user email to your own address**. The email is required by the Bio Entrez package to fetch reference sequences. The first time you run the pipeline, it will take some time to install each of the conda environments, so it is a good time to take a tea break :).\r\n```\r\nconda activate snakemake\r\n\r\nsnakemake \\\r\n   --cores 4 \\\r\n   --use-conda \\\r\n   --use-singularity \\ \r\n   --config user_email=user@example_email.com\r\n```\r\n\r\n<br>\r\n<div>\r\n    <b><a href=\"#skim2mt\">↥ back to top</a></b>\r\n</div>\r\n<br>\r\n\r\n## Input\r\n\r\nSnakemake requires a `config.yaml` and `samples.csv` to define input parameters and sequence data for each sample. \r\n\r\nFor the example data provided, the config file is located here `config/config.yaml` and it looks like this:\r\n```\r\n# path to sample sheet csv with columns for ID,forward,reverse,taxid,seed,gene\r\nsamples: config/samples.csv\r\n\r\n# user email\r\nuser_email: user@example_email.com\r\n\r\n# getorganelle reference (go_fetch, custom)\r\ngo_reference: go_fetch\r\n\r\n# forward adapter\r\nforward_adapter: AGATCGGAAGAGCACACGTCTGAACTCCAGTCA\r\n\r\n# reverse adapter\r\nreverse_adapter: AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\r\n\r\n# fastp deduplication (True/False)\r\nfastp_dedup: True\r\n\r\n# mitos refseq database (refseq39, refseq63f, refseq63m, refseq63o, refseq89f, refseq89m, refseq89o)\r\nmitos_refseq: refseq39\r\n\r\n# mito code (2 = Vertebrate, 4 = Mold, 5 = Invertebrate, 9 = Echinoderm, 13 = Ascidian, 14 = Alternative flatworm)\r\nmitos_code: 5\r\n\r\n# alignment trimming method to use (gblocks or clipkit)\r\nalignment_trim: gblocks\r\n\r\n# alignment missing data threshold for alignment (0.0 - 1.0)\r\nmissing_threshold: 0.5\r\n\r\n# name of outgroup sample (optional)\r\n# use \"NA\" if there is no obvious outgroup\r\n# if more than one outgroup use a comma separated list i.e. \"sampleA,sampleB\"\r\noutgroup: Eurema_blanda\r\n\r\n# plot dimensions (cm)\r\nplot_height: 20\r\nplot_width: 20\r\n```\r\n\r\nThe example samples.csv file is located here `config/samples.csv` and it looks like this (note that the seed and gene columns are only required if the custom getorganelle database option is specified in the config file):\r\n\r\n\r\n ID | forward | reverse | taxid | seed | gene \r\n----|---------|---------|-------|------|------\r\nAdelpha_iphiclus | .test/reads/Adelpha_iphiclus_1.fq.gz | .test/reads/Adelpha_iphiclus_2.fq.gz | 100750 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nAnartia_jatrophae_saturata | .test/reads/Anartia_jatrophae_saturata_1.fq.gz | .test/reads/Anartia_jatrophae_saturata_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nAraschnia_levana | .test/reads/Araschnia_levana_1.fq.gz | .test/reads/Araschnia_levana_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nAuzakia_danava | .test/reads/Auzakia_danava_1.fq.gz | .test/reads/Auzakia_danava_2.fq.gz | 100750 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nBaeotus_beotus | .test/reads/Baeotus_beotus_1.fq.gz | .test/reads/Baeotus_beotus_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nCatacroptera_cloanthe | .test/reads/Catacroptera_cloanthe_1.fq.gz | .test/reads/Catacroptera_cloanthe_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nChalinga_pratti | .test/reads/Chalinga_pratti_1.fq.gz | .test/reads/Chalinga_pratti_2.fq.gz | 100750 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nDiaethria_gabaza_eupepla | .test/reads/Diaethria_gabaza_eupepla_1.fq.gz | .test/reads/Diaethria_gabaza_eupepla_2.fq.gz | 127268 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nDoleschallia_melana | .test/reads/Doleschallia_melana_1.fq.gz | .test/reads/Doleschallia_melana_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nEurema_blanda | .test/reads/Eurema_blanda_1.fq.gz | .test/reads/Eurema_blanda_2.fq.gz | 42450 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nHypolimnas_usambara | .test/reads/Hypolimnas_usambara_1.fq.gz | .test/reads/Hypolimnas_usambara_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nJunonia_villida | .test/reads/Junonia_villida_1.fq.gz | .test/reads/Junonia_villida_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nKallima_paralekta | .test/reads/Kallima_paralekta_1.fq.gz | .test/reads/Kallima_paralekta_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nKallimoides_rumia | .test/reads/Kallimoides_rumia_1.fq.gz | .test/reads/Kallimoides_rumia_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nLitinga_cottini | .test/reads/Litinga_cottini_1.fq.gz | .test/reads/Litinga_cottini_2.fq.gz | 100750 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nMallika_jacksoni | .test/reads/Mallika_jacksoni_1.fq.gz | .test/reads/Mallika_jacksoni_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nModuza_procris | .test/reads/Moduza_procris_1.fq.gz | .test/reads/Moduza_procris_2.fq.gz | 100750 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nParasarpa_zayla | .test/reads/Parasarpa_zayla_1.fq.gz | .test/reads/Parasarpa_zayla_2.fq.gz | 100750 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nPhaedyma_columella | .test/reads/Phaedyma_columella_1.fq.gz | .test/reads/Phaedyma_columella_2.fq.gz | 100750 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nPrecis_pelarga | .test/reads/Precis_pelarga_1.fq.gz | .test/reads/Precis_pelarga_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nProtogoniomorpha_temora | .test/reads/Protogoniomorpha_temora_1.fq.gz | .test/reads/Protogoniomorpha_temora_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nSalamis_cacta | .test/reads/Salamis_cacta_1.fq.gz | .test/reads/Salamis_cacta_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nSmyrna_blomfildia | .test/reads/Smyrna_blomfildia_1.fq.gz | .test/reads/Smyrna_blomfildia_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nTacola_larymna | .test/reads/Tacola_larymna_1.fq.gz | .test/reads/Tacola_larymna_2.fq.gz | 100750 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nYoma_algina | .test/reads/Yoma_algina_1.fq.gz | .test/reads/Yoma_algina_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\n\r\n\r\n<br>\r\n<div>\r\n    <b><a href=\"#skim2mt\">↥ back to top</a></b>\r\n</div>\r\n<br>\r\n\r\n## Output\r\n\r\nAll output files are saved to the `results` direcotry. Below is a table summarising all of the output files generated by the pipeline.\r\n\r\n| Directory             | Description               |\r\n|-----------------------|---------------------------|\r\n| fastqc_raw            | Fastqc reports for raw input reads |\r\n| fastp                 | Fastp reports from quality control of raw reads |\r\n| fastqc_qc             | Fastqc reports for quality controlled reads |\r\n| go_fetch              | Optional output containing reference databasesused by GetOrganelle |\r\n| getorganelle          | GetOrganelle output with a directory for each sample |\r\n| assembled_sequence    | Assembled sequences selected from GetOrganelle output and renamed |\r\n| seqkit                | Seqkit summary of each assembly |\r\n| blastn                | Blastn output of each assembly |\r\n| minimap               | Mapping output of quality filtered reads against each assembly |\r\n| blobtools             | Blobtools assembly summary collating blastn and mapping output |\r\n| assess_assembly       | Plots of annotations, mean depth, GC content and proportion mismatches |\r\n| annotations           | Annotation outputs of mitos |\r\n| summary               | Summary per sample (seqkit stats), contig (GC content, length, coverage, taxonomy and annotations) and annotated gene counts |\r\n| annotated_genes  | Unaligned fasta files of annotated genes identified across all samples |\r\n| mafft                 | Mafft aligned fasta files of annotated genes identified across all samples |\r\n| mafft_filtered        | Mafft aligned fasta files after the removal of sequences based on a missing data threshold |\r\n| alignment_trim        | Ambiguous parts of alignment removed using either gblocks or clipkit |\r\n| iqtree                | Iqtree phylogenetic analysis of annotated genes |\r\n| plot_tree             | Plots of phylogenetic trees |\r\n\r\n<br>\r\n<div>\r\n    <b><a href=\"#skim2mt\">↥ back to top</a></b>\r\n</div>\r\n<br>\r\n\r\n## Filtering contaminants\r\n\r\nIf you are working with museum collections, it is possible that you may assemble and annotate sequences from contaminant/non-target species. *Contaminant sequences can be identified based on the blast search output or unusual placement in the phylogenetic trees* (see blobtools and plot_tree outputs). \r\n\r\nA supplementary python script `format_alignments.py `is provided to remove putative contaminants from alignments, and format the alignments for downstream phylogenetic analysis.\r\n\r\nFor example, let's say we wanted to remove all sequences from the sample \"Kallima_paralekta\" and atp6 gene sequences, you could run the script as shown below. The script works by identifying and removing sequences that have names with  `Kallima_paralekta` or `atp6` in the sequence names. The filtered alignments are written to a new output directory `filter_alignments_output`.\r\n\r\n```\r\npython workflow/scripts/format_alignments.py  \\\r\n   --input results/mafft_filtered/ \\\r\n   --cont Kallima_paralekta atp6 \\\r\n   --output filter_alignments_output\r\n```\r\n\r\n*Note that the output fasta files have been reformatted so each alignment file is named after the gene and each sequence is named after the sample.* This is useful if you would like to run our related pipeline **gene2phylo** for further phylogenetic analyses.\r\n\r\n<br>\r\n<div>\r\n    <b><a href=\"#skim2mt\">↥ back to top</a></b>\r\n</div>\r\n<br>\r\n\r\n## Assembly and annotation only\r\n\r\nIf you are only interested in the assembly of mitochondrial sequences and annotation of genes without the phylogenetic analysis, you can stop the pipeline from running the gene alignment and phylogenetic analyses using the `--omit-from` parameter.\r\n```\r\nsnakemake \\\r\n   --cores 4 \\\r\n   --use-conda \\\r\n   --use-singularity \\\r\n   --config user_email=user@example_email.com \\\r\n   --omit-from mafft\r\n```\r\n\r\n<br>\r\n<div>\r\n    <b><a href=\"#skim2mt\">↥ back to top</a></b>\r\n</div>\r\n<br>\r\n\r\n## Running your own data\r\n\r\nThe first thing you need to do is generate your own config.yaml and samples.csv files, using the files provided as a template.\r\n\r\nGetOrganelle requires reference data in the format of seed and gene reference fasta files. By default the pipeline uses a basic python script called go_fetch.py https://github.com/o-william-white/go_fetch to download and format reference data formatted for GetOrganelle. \r\n\r\ngo_fetch.py works by searching NCBI based on the NCBI taxonomy specified by the taxid column in the samples.csv file. Note that the seed and gene columns in the samples.csv file are only required if you want to provide your own custom GetOrganelle seed and gene reference databases. \r\n\r\nYou can use the default reference data for GetOrganelle, but I would recommend using custom reference databases where possible. See here for details of how to set up your own databases https://github.com/Kinggerm/GetOrganelle/wiki/FAQ#how-to-assemble-a-target-organelle-genome-using-my-own-reference\r\n\r\n## Getting help\r\n\r\nIf you have any questions, please do get in touch in the issues or by email o.william.white@gmail.com\r\n\r\n<br>\r\n<div>\r\n    <b><a href=\"#skim2mt\">↥ back to top</a></b>\r\n</div>\r\n<br>\r\n\r\n## Citations\r\n\r\nIf you use the pipeline, please cite our bioarxiv preprint: https://doi.org/10.1101/2023.08.11.552985\r\n\r\nSince the pipeline is a wrapper for several other bioinformatic tools we also ask that you cite the tools used by the pipeline:\r\n - Fastqc https://github.com/s-andrews/FastQC\r\n - Fastp https://doi.org/10.1093/bioinformatics/bty560\r\n - GetOrganelle https://doi.org/10.1186/s13059-020-02154-5\r\n - Blastn https://doi.org/10.1186/1471-2105-10-421\r\n - Minimap2 https://doi.org/10.1093/bioinformatics/bty191\r\n - Blobtools https://doi.org/10.12688/f1000research.12232.1\r\n - Seqkit https://doi.org/10.1371/journal.pone.0163962\r\n - MITOS2 https://doi.org/10.1016/j.ympev.2012.08.023\r\n - Gblocks (default) https://doi.org/10.1093/oxfordjournals.molbev.a026334\r\n - Clipkit (optional) https://doi.org/10.1371/journal.pbio.3001007\r\n - Mafft https://doi.org/10.1093/molbev/mst010\r\n - Iqtree https://doi.org/10.1093/molbev/msu300\r\n - ete3 https://doi.org/10.1093/molbev/msw046\r\n - ggtree https://doi.org/10.1111/2041-210X.12628\r\n\r\n<br>\r\n<div>\r\n    <b><a href=\"#skim2mt\">↥ back to top</a></b>\r\n</div>\r\n<br>\r\n",
      "isBasedOn": "https://github.com/o-william-white/skim2mt.git",
      "sdDatePublished": "2024-04-25 08:34:51 +0100",
      "creativeWorkStatus": "Stable",
      "hasPart": [
        {
          "@id": "workflow/Snakefile"
        }
      ]
    },
    {
      "@id": "workflow/Snakefile",
      "@type": [
        "File",
        "SoftwareSourceCode",
        "ComputationalWorkflow"
      ],
      "contentSize": 2844,
      "programmingLanguage": {
        "@id": "#snakemake"
      },
      "dct:conformsTo": "https://bioschemas.org/profiles/ComputationalWorkflow/1.0-RELEASE/",
      "description": "# skim2mt\r\n\r\n**skim2mt** is a snakemake pipeline for the batch assembly, annotation, and phylogenetic analysis of mitochondrial genomes from low coverage genome skims. The pipeline was designed to work with sequence data from museum collections. However, it should also work with genome skims from recently collected samples.\r\n\r\n## Contents\r\n - [Setup](#setup)\r\n - [Example data](#example-data)\r\n - [Input](#input)\r\n - [Output](#output)\r\n - [Filtering contaminants](#filtering-contaminants)\r\n - [Assembly and annotation only](#assembly-and-annotation-only)\r\n - [Running your own data](#running-your-own-data)\r\n - [Getting help](#getting-help)\r\n - [Citations](#citations)\r\n\r\n## Setup\r\n\r\nThe pipeline is written in Snakemake and uses conda and singularity to install the necessary tools.\r\n\r\nIt is *strongly recommended* to install conda using Mambaforge. See details here https://snakemake.readthedocs.io/en/stable/getting_started/installation.html\r\n\r\nOnce conda is installed, you can pull the github repo and set up the base conda environment.\r\n\r\n```\r\n# get github repo\r\ngit clone https://github.com/o-william-white/skim2mt\r\n\r\n# change dir\r\ncd skim2mt\r\n\r\n# setup conda env\r\nconda env create -n snakemake -f workflow/envs/conda_env.yaml\r\n```\r\n\r\n<br>\r\n<div>\r\n    <b><a href=\"#skim2mt\">↥ back to top</a></b>\r\n</div>\r\n<br>\r\n\r\n## Example data\r\n\r\nBefore you run your own data, it is recommended to run the example datasets provided . This will confirm there are no user-specific issues with the setup and it also installs all the dependencies. The example data includes simulated mitochondrial data from 25 different butterfly species. \r\n\r\nTo run the example data, use the code below. **Note that you need to change the user email to your own address**. The email is required by the Bio Entrez package to fetch reference sequences. The first time you run the pipeline, it will take some time to install each of the conda environments, so it is a good time to take a tea break :).\r\n```\r\nconda activate snakemake\r\n\r\nsnakemake \\\r\n   --cores 4 \\\r\n   --use-conda \\\r\n   --use-singularity \\ \r\n   --config user_email=user@example_email.com\r\n```\r\n\r\n<br>\r\n<div>\r\n    <b><a href=\"#skim2mt\">↥ back to top</a></b>\r\n</div>\r\n<br>\r\n\r\n## Input\r\n\r\nSnakemake requires a `config.yaml` and `samples.csv` to define input parameters and sequence data for each sample. \r\n\r\nFor the example data provided, the config file is located here `config/config.yaml` and it looks like this:\r\n```\r\n# path to sample sheet csv with columns for ID,forward,reverse,taxid,seed,gene\r\nsamples: config/samples.csv\r\n\r\n# user email\r\nuser_email: user@example_email.com\r\n\r\n# getorganelle reference (go_fetch, custom)\r\ngo_reference: go_fetch\r\n\r\n# forward adapter\r\nforward_adapter: AGATCGGAAGAGCACACGTCTGAACTCCAGTCA\r\n\r\n# reverse adapter\r\nreverse_adapter: AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT\r\n\r\n# fastp deduplication (True/False)\r\nfastp_dedup: True\r\n\r\n# mitos refseq database (refseq39, refseq63f, refseq63m, refseq63o, refseq89f, refseq89m, refseq89o)\r\nmitos_refseq: refseq39\r\n\r\n# mito code (2 = Vertebrate, 4 = Mold, 5 = Invertebrate, 9 = Echinoderm, 13 = Ascidian, 14 = Alternative flatworm)\r\nmitos_code: 5\r\n\r\n# alignment trimming method to use (gblocks or clipkit)\r\nalignment_trim: gblocks\r\n\r\n# alignment missing data threshold for alignment (0.0 - 1.0)\r\nmissing_threshold: 0.5\r\n\r\n# name of outgroup sample (optional)\r\n# use \"NA\" if there is no obvious outgroup\r\n# if more than one outgroup use a comma separated list i.e. \"sampleA,sampleB\"\r\noutgroup: Eurema_blanda\r\n\r\n# plot dimensions (cm)\r\nplot_height: 20\r\nplot_width: 20\r\n```\r\n\r\nThe example samples.csv file is located here `config/samples.csv` and it looks like this (note that the seed and gene columns are only required if the custom getorganelle database option is specified in the config file):\r\n\r\n\r\n ID | forward | reverse | taxid | seed | gene \r\n----|---------|---------|-------|------|------\r\nAdelpha_iphiclus | .test/reads/Adelpha_iphiclus_1.fq.gz | .test/reads/Adelpha_iphiclus_2.fq.gz | 100750 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nAnartia_jatrophae_saturata | .test/reads/Anartia_jatrophae_saturata_1.fq.gz | .test/reads/Anartia_jatrophae_saturata_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nAraschnia_levana | .test/reads/Araschnia_levana_1.fq.gz | .test/reads/Araschnia_levana_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nAuzakia_danava | .test/reads/Auzakia_danava_1.fq.gz | .test/reads/Auzakia_danava_2.fq.gz | 100750 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nBaeotus_beotus | .test/reads/Baeotus_beotus_1.fq.gz | .test/reads/Baeotus_beotus_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nCatacroptera_cloanthe | .test/reads/Catacroptera_cloanthe_1.fq.gz | .test/reads/Catacroptera_cloanthe_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nChalinga_pratti | .test/reads/Chalinga_pratti_1.fq.gz | .test/reads/Chalinga_pratti_2.fq.gz | 100750 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nDiaethria_gabaza_eupepla | .test/reads/Diaethria_gabaza_eupepla_1.fq.gz | .test/reads/Diaethria_gabaza_eupepla_2.fq.gz | 127268 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nDoleschallia_melana | .test/reads/Doleschallia_melana_1.fq.gz | .test/reads/Doleschallia_melana_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nEurema_blanda | .test/reads/Eurema_blanda_1.fq.gz | .test/reads/Eurema_blanda_2.fq.gz | 42450 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nHypolimnas_usambara | .test/reads/Hypolimnas_usambara_1.fq.gz | .test/reads/Hypolimnas_usambara_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nJunonia_villida | .test/reads/Junonia_villida_1.fq.gz | .test/reads/Junonia_villida_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nKallima_paralekta | .test/reads/Kallima_paralekta_1.fq.gz | .test/reads/Kallima_paralekta_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nKallimoides_rumia | .test/reads/Kallimoides_rumia_1.fq.gz | .test/reads/Kallimoides_rumia_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nLitinga_cottini | .test/reads/Litinga_cottini_1.fq.gz | .test/reads/Litinga_cottini_2.fq.gz | 100750 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nMallika_jacksoni | .test/reads/Mallika_jacksoni_1.fq.gz | .test/reads/Mallika_jacksoni_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nModuza_procris | .test/reads/Moduza_procris_1.fq.gz | .test/reads/Moduza_procris_2.fq.gz | 100750 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nParasarpa_zayla | .test/reads/Parasarpa_zayla_1.fq.gz | .test/reads/Parasarpa_zayla_2.fq.gz | 100750 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nPhaedyma_columella | .test/reads/Phaedyma_columella_1.fq.gz | .test/reads/Phaedyma_columella_2.fq.gz | 100750 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nPrecis_pelarga | .test/reads/Precis_pelarga_1.fq.gz | .test/reads/Precis_pelarga_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nProtogoniomorpha_temora | .test/reads/Protogoniomorpha_temora_1.fq.gz | .test/reads/Protogoniomorpha_temora_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nSalamis_cacta | .test/reads/Salamis_cacta_1.fq.gz | .test/reads/Salamis_cacta_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nSmyrna_blomfildia | .test/reads/Smyrna_blomfildia_1.fq.gz | .test/reads/Smyrna_blomfildia_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nTacola_larymna | .test/reads/Tacola_larymna_1.fq.gz | .test/reads/Tacola_larymna_2.fq.gz | 100750 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\nYoma_algina | .test/reads/Yoma_algina_1.fq.gz | .test/reads/Yoma_algina_2.fq.gz | 40040 | .test/seed_mitochondrion.fasta | .test/gene_mitochondrion.fasta\r\n\r\n\r\n<br>\r\n<div>\r\n    <b><a href=\"#skim2mt\">↥ back to top</a></b>\r\n</div>\r\n<br>\r\n\r\n## Output\r\n\r\nAll output files are saved to the `results` direcotry. Below is a table summarising all of the output files generated by the pipeline.\r\n\r\n| Directory             | Description               |\r\n|-----------------------|---------------------------|\r\n| fastqc_raw            | Fastqc reports for raw input reads |\r\n| fastp                 | Fastp reports from quality control of raw reads |\r\n| fastqc_qc             | Fastqc reports for quality controlled reads |\r\n| go_fetch              | Optional output containing reference databasesused by GetOrganelle |\r\n| getorganelle          | GetOrganelle output with a directory for each sample |\r\n| assembled_sequence    | Assembled sequences selected from GetOrganelle output and renamed |\r\n| seqkit                | Seqkit summary of each assembly |\r\n| blastn                | Blastn output of each assembly |\r\n| minimap               | Mapping output of quality filtered reads against each assembly |\r\n| blobtools             | Blobtools assembly summary collating blastn and mapping output |\r\n| assess_assembly       | Plots of annotations, mean depth, GC content and proportion mismatches |\r\n| annotations           | Annotation outputs of mitos |\r\n| summary               | Summary per sample (seqkit stats), contig (GC content, length, coverage, taxonomy and annotations) and annotated gene counts |\r\n| annotated_genes  | Unaligned fasta files of annotated genes identified across all samples |\r\n| mafft                 | Mafft aligned fasta files of annotated genes identified across all samples |\r\n| mafft_filtered        | Mafft aligned fasta files after the removal of sequences based on a missing data threshold |\r\n| alignment_trim        | Ambiguous parts of alignment removed using either gblocks or clipkit |\r\n| iqtree                | Iqtree phylogenetic analysis of annotated genes |\r\n| plot_tree             | Plots of phylogenetic trees |\r\n\r\n<br>\r\n<div>\r\n    <b><a href=\"#skim2mt\">↥ back to top</a></b>\r\n</div>\r\n<br>\r\n\r\n## Filtering contaminants\r\n\r\nIf you are working with museum collections, it is possible that you may assemble and annotate sequences from contaminant/non-target species. *Contaminant sequences can be identified based on the blast search output or unusual placement in the phylogenetic trees* (see blobtools and plot_tree outputs). \r\n\r\nA supplementary python script `format_alignments.py `is provided to remove putative contaminants from alignments, and format the alignments for downstream phylogenetic analysis.\r\n\r\nFor example, let's say we wanted to remove all sequences from the sample \"Kallima_paralekta\" and atp6 gene sequences, you could run the script as shown below. The script works by identifying and removing sequences that have names with  `Kallima_paralekta` or `atp6` in the sequence names. The filtered alignments are written to a new output directory `filter_alignments_output`.\r\n\r\n```\r\npython workflow/scripts/format_alignments.py  \\\r\n   --input results/mafft_filtered/ \\\r\n   --cont Kallima_paralekta atp6 \\\r\n   --output filter_alignments_output\r\n```\r\n\r\n*Note that the output fasta files have been reformatted so each alignment file is named after the gene and each sequence is named after the sample.* This is useful if you would like to run our related pipeline **gene2phylo** for further phylogenetic analyses.\r\n\r\n<br>\r\n<div>\r\n    <b><a href=\"#skim2mt\">↥ back to top</a></b>\r\n</div>\r\n<br>\r\n\r\n## Assembly and annotation only\r\n\r\nIf you are only interested in the assembly of mitochondrial sequences and annotation of genes without the phylogenetic analysis, you can stop the pipeline from running the gene alignment and phylogenetic analyses using the `--omit-from` parameter.\r\n```\r\nsnakemake \\\r\n   --cores 4 \\\r\n   --use-conda \\\r\n   --use-singularity \\\r\n   --config user_email=user@example_email.com \\\r\n   --omit-from mafft\r\n```\r\n\r\n<br>\r\n<div>\r\n    <b><a href=\"#skim2mt\">↥ back to top</a></b>\r\n</div>\r\n<br>\r\n\r\n## Running your own data\r\n\r\nThe first thing you need to do is generate your own config.yaml and samples.csv files, using the files provided as a template.\r\n\r\nGetOrganelle requires reference data in the format of seed and gene reference fasta files. By default the pipeline uses a basic python script called go_fetch.py https://github.com/o-william-white/go_fetch to download and format reference data formatted for GetOrganelle. \r\n\r\ngo_fetch.py works by searching NCBI based on the NCBI taxonomy specified by the taxid column in the samples.csv file. Note that the seed and gene columns in the samples.csv file are only required if you want to provide your own custom GetOrganelle seed and gene reference databases. \r\n\r\nYou can use the default reference data for GetOrganelle, but I would recommend using custom reference databases where possible. See here for details of how to set up your own databases https://github.com/Kinggerm/GetOrganelle/wiki/FAQ#how-to-assemble-a-target-organelle-genome-using-my-own-reference\r\n\r\n## Getting help\r\n\r\nIf you have any questions, please do get in touch in the issues or by email o.william.white@gmail.com\r\n\r\n<br>\r\n<div>\r\n    <b><a href=\"#skim2mt\">↥ back to top</a></b>\r\n</div>\r\n<br>\r\n\r\n## Citations\r\n\r\nIf you use the pipeline, please cite our bioarxiv preprint: https://doi.org/10.1101/2023.08.11.552985\r\n\r\nSince the pipeline is a wrapper for several other bioinformatic tools we also ask that you cite the tools used by the pipeline:\r\n - Fastqc https://github.com/s-andrews/FastQC\r\n - Fastp https://doi.org/10.1093/bioinformatics/bty560\r\n - GetOrganelle https://doi.org/10.1186/s13059-020-02154-5\r\n - Blastn https://doi.org/10.1186/1471-2105-10-421\r\n - Minimap2 https://doi.org/10.1093/bioinformatics/bty191\r\n - Blobtools https://doi.org/10.12688/f1000research.12232.1\r\n - Seqkit https://doi.org/10.1371/journal.pone.0163962\r\n - MITOS2 https://doi.org/10.1016/j.ympev.2012.08.023\r\n - Gblocks (default) https://doi.org/10.1093/oxfordjournals.molbev.a026334\r\n - Clipkit (optional) https://doi.org/10.1371/journal.pbio.3001007\r\n - Mafft https://doi.org/10.1093/molbev/mst010\r\n - Iqtree https://doi.org/10.1093/molbev/msu300\r\n - ete3 https://doi.org/10.1093/molbev/msw046\r\n - ggtree https://doi.org/10.1111/2041-210X.12628\r\n\r\n<br>\r\n<div>\r\n    <b><a href=\"#skim2mt\">↥ back to top</a></b>\r\n</div>\r\n<br>\r\n",
      "name": "skim2mt",
      "url": "https://workflowhub.eu/workflows/791?version=1",
      "keywords": "",
      "version": 1,
      "license": "https://opensource.org/licenses/MIT",
      "producer": {
        "@id": "https://workflowhub.eu/projects/233"
      },
      "dateCreated": "2024-03-12T15:03:20Z",
      "dateModified": "2024-03-12T15:03:20Z",
      "isPartOf": [

      ],
      "input": [

      ],
      "output": [

      ],
      "sdPublisher": {
        "@id": "https://about.workflowhub.eu/"
      }
    },
    {
      "@id": "https://about.workflowhub.eu/Workflow-RO-Crate/",
      "@type": "CreativeWork",
      "name": "Workflow RO-Crate Profile",
      "version": "0.2.0"
    },
    {
      "@id": "https://workflowhub.eu/projects/233",
      "@type": [
        "Project",
        "Organization"
      ],
      "name": "NHM Clark group"
    },
    {
      "@id": "#snakemake",
      "@type": "ComputerLanguage",
      "name": "Snakemake",
      "identifier": {
        "@id": "https://doi.org/10.1093/bioinformatics/bts480"
      },
      "url": {
        "@id": "https://snakemake.readthedocs.io"
      }
    },
    {
      "@id": "https://about.workflowhub.eu/",
      "@type": "Organization",
      "name": "WorkflowHub",
      "url": "https://about.workflowhub.eu/"
    }
  ]
}