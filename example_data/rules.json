    <script id="rules">
    var rules = {"go_fetch": {"input": [], "output": ["results/go_fetch/{taxids}/gene.fasta", "results/go_fetch/{taxids}/seed.fasta"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["getorganelle =1.7.7.0", "trf", "biopython"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span>python3<span class=\"w\"> </span>workflow/scripts/go_fetch.py<span class=\"w\">             </span>--taxonomy<span class=\"w\"> </span><span class=\"o\">{</span>wildcards.taxids<span class=\"o\">}</span><span class=\"w\">             </span>--target<span class=\"w\"> </span>mitochondrion<span class=\"w\">             </span>--db<span class=\"w\"> </span>genbank<span class=\"w\">             </span>--min<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\">              </span>--max<span class=\"w\"> </span><span class=\"m\">10</span><span class=\"w\">             </span>--output<span class=\"w\"> </span>results/go_fetch/<span class=\"o\">{</span>wildcards.taxids<span class=\"o\">}</span><span class=\"w\">             </span>--getorganelle<span class=\"w\">             </span>--email<span class=\"w\"> </span>params.email<span class=\"w\">             </span>--overwrite<span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 4}, "fastqc_raw_fwd": {"input": ["<function>"], "output": ["results/fastqc_raw/{sample}_R1.html", "results/fastqc_raw/{sample}_R1_fastqc.zip"], "conda_env": {"channels": ["conda-forge", "bioconda", "nodefaults"], "dependencies": ["fastqc =0.12.1", "snakemake-wrapper-utils =0.6.2"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span>\n<span class=\"normal\">45</span>\n<span class=\"normal\">46</span>\n<span class=\"normal\">47</span>\n<span class=\"normal\">48</span>\n<span class=\"normal\">49</span>\n<span class=\"normal\">50</span>\n<span class=\"normal\">51</span>\n<span class=\"normal\">52</span>\n<span class=\"normal\">53</span>\n<span class=\"normal\">54</span>\n<span class=\"normal\">55</span>\n<span class=\"normal\">56</span>\n<span class=\"normal\">57</span>\n<span class=\"normal\">58</span>\n<span class=\"normal\">59</span>\n<span class=\"normal\">60</span>\n<span class=\"normal\">61</span>\n<span class=\"normal\">62</span>\n<span class=\"normal\">63</span>\n<span class=\"normal\">64</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"sd\">&quot;&quot;&quot;Snakemake wrapper for fastqc.&quot;&quot;&quot;</span>\n\n<span class=\"n\">__author__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Julian de Ruiter&quot;</span>\n<span class=\"n\">__copyright__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Copyright 2017, Julian de Ruiter&quot;</span>\n<span class=\"n\">__email__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;julianderuiter@gmail.com&quot;</span>\n<span class=\"n\">__license__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;MIT&quot;</span>\n\n\n<span class=\"kn\">from</span> <span class=\"nn\">os</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tempfile</span> <span class=\"kn\">import</span> <span class=\"n\">TemporaryDirectory</span>\n<span class=\"kn\">from</span> <span class=\"nn\">snakemake.shell</span> <span class=\"kn\">import</span> <span class=\"n\">shell</span>\n<span class=\"kn\">from</span> <span class=\"nn\">snakemake_wrapper_utils.snakemake</span> <span class=\"kn\">import</span> <span class=\"n\">get_mem</span>\n\n<span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;extra&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">log_fmt_shell</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># Define memory per thread (https://github.com/s-andrews/FastQC/blob/master/fastqc#L201-L222)</span>\n<span class=\"n\">mem_mb</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">get_mem</span><span class=\"p\">(</span><span class=\"n\">snakemake</span><span class=\"p\">,</span> <span class=\"s2\">&quot;MiB&quot;</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">threads</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">basename_without_ext</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Returns basename of file path, without the file extension.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Remove file extension(s) (similar to the internal fastqc approach)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.gz$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.bz2$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.txt$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.fastq$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.fq$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.sam$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.bam$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">base</span>\n\n\n<span class=\"c1\"># If you have multiple input files fastqc doesn&#39;t know what to do. Taking silently only first gives unapreciated results</span>\n\n<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">IOError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Got multiple input files, I don&#39;t know how to process them!&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Run fastqc, since there can be race conditions if multiple jobs</span>\n<span class=\"c1\"># use the same fastqc dir, we create a temp dir.</span>\n<span class=\"k\">with</span> <span class=\"n\">TemporaryDirectory</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">tempdir</span><span class=\"p\">:</span>\n    <span class=\"n\">shell</span><span class=\"p\">(</span>\n        <span class=\"s2\">&quot;fastqc&quot;</span>\n        <span class=\"s2\">&quot; --threads </span><span class=\"si\">{snakemake.threads}</span><span class=\"s2\">&quot;</span>\n        <span class=\"s2\">&quot; --memory </span><span class=\"si\">{mem_mb}</span><span class=\"s2\">&quot;</span>\n        <span class=\"s2\">&quot; </span><span class=\"si\">{extra}</span><span class=\"s2\">&quot;</span>\n        <span class=\"s2\">&quot; --outdir {tempdir:q}&quot;</span>\n        <span class=\"s2\">&quot; {snakemake.input[0]:q}&quot;</span>\n        <span class=\"s2\">&quot; </span><span class=\"si\">{log}</span><span class=\"s2\">&quot;</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Move outputs into proper position.</span>\n    <span class=\"n\">output_base</span> <span class=\"o\">=</span> <span class=\"n\">basename_without_ext</span><span class=\"p\">(</span><span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"n\">html_path</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">tempdir</span><span class=\"p\">,</span> <span class=\"n\">output_base</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_fastqc.html&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">zip_path</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">tempdir</span><span class=\"p\">,</span> <span class=\"n\">output_base</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_fastqc.zip&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">html</span> <span class=\"o\">!=</span> <span class=\"n\">html_path</span><span class=\"p\">:</span>\n        <span class=\"n\">shell</span><span class=\"p\">(</span><span class=\"s2\">&quot;mv {html_path:q} {snakemake.output.html:q}&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">zip</span> <span class=\"o\">!=</span> <span class=\"n\">zip_path</span><span class=\"p\">:</span>\n        <span class=\"n\">shell</span><span class=\"p\">(</span><span class=\"s2\">&quot;mv {zip_path:q} {snakemake.output.zip:q}&quot;</span><span class=\"p\">)</span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 25}, "fastqc_raw_rev": {"input": ["<function>"], "output": ["results/fastqc_raw/{sample}_R2.html", "results/fastqc_raw/{sample}_R2_fastqc.zip"], "conda_env": {"channels": ["conda-forge", "bioconda", "nodefaults"], "dependencies": ["fastqc =0.12.1", "snakemake-wrapper-utils =0.6.2"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span>\n<span class=\"normal\">45</span>\n<span class=\"normal\">46</span>\n<span class=\"normal\">47</span>\n<span class=\"normal\">48</span>\n<span class=\"normal\">49</span>\n<span class=\"normal\">50</span>\n<span class=\"normal\">51</span>\n<span class=\"normal\">52</span>\n<span class=\"normal\">53</span>\n<span class=\"normal\">54</span>\n<span class=\"normal\">55</span>\n<span class=\"normal\">56</span>\n<span class=\"normal\">57</span>\n<span class=\"normal\">58</span>\n<span class=\"normal\">59</span>\n<span class=\"normal\">60</span>\n<span class=\"normal\">61</span>\n<span class=\"normal\">62</span>\n<span class=\"normal\">63</span>\n<span class=\"normal\">64</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"sd\">&quot;&quot;&quot;Snakemake wrapper for fastqc.&quot;&quot;&quot;</span>\n\n<span class=\"n\">__author__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Julian de Ruiter&quot;</span>\n<span class=\"n\">__copyright__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Copyright 2017, Julian de Ruiter&quot;</span>\n<span class=\"n\">__email__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;julianderuiter@gmail.com&quot;</span>\n<span class=\"n\">__license__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;MIT&quot;</span>\n\n\n<span class=\"kn\">from</span> <span class=\"nn\">os</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tempfile</span> <span class=\"kn\">import</span> <span class=\"n\">TemporaryDirectory</span>\n<span class=\"kn\">from</span> <span class=\"nn\">snakemake.shell</span> <span class=\"kn\">import</span> <span class=\"n\">shell</span>\n<span class=\"kn\">from</span> <span class=\"nn\">snakemake_wrapper_utils.snakemake</span> <span class=\"kn\">import</span> <span class=\"n\">get_mem</span>\n\n<span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;extra&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">log_fmt_shell</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># Define memory per thread (https://github.com/s-andrews/FastQC/blob/master/fastqc#L201-L222)</span>\n<span class=\"n\">mem_mb</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">get_mem</span><span class=\"p\">(</span><span class=\"n\">snakemake</span><span class=\"p\">,</span> <span class=\"s2\">&quot;MiB&quot;</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">threads</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">basename_without_ext</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Returns basename of file path, without the file extension.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Remove file extension(s) (similar to the internal fastqc approach)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.gz$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.bz2$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.txt$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.fastq$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.fq$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.sam$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.bam$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">base</span>\n\n\n<span class=\"c1\"># If you have multiple input files fastqc doesn&#39;t know what to do. Taking silently only first gives unapreciated results</span>\n\n<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">IOError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Got multiple input files, I don&#39;t know how to process them!&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Run fastqc, since there can be race conditions if multiple jobs</span>\n<span class=\"c1\"># use the same fastqc dir, we create a temp dir.</span>\n<span class=\"k\">with</span> <span class=\"n\">TemporaryDirectory</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">tempdir</span><span class=\"p\">:</span>\n    <span class=\"n\">shell</span><span class=\"p\">(</span>\n        <span class=\"s2\">&quot;fastqc&quot;</span>\n        <span class=\"s2\">&quot; --threads </span><span class=\"si\">{snakemake.threads}</span><span class=\"s2\">&quot;</span>\n        <span class=\"s2\">&quot; --memory </span><span class=\"si\">{mem_mb}</span><span class=\"s2\">&quot;</span>\n        <span class=\"s2\">&quot; </span><span class=\"si\">{extra}</span><span class=\"s2\">&quot;</span>\n        <span class=\"s2\">&quot; --outdir {tempdir:q}&quot;</span>\n        <span class=\"s2\">&quot; {snakemake.input[0]:q}&quot;</span>\n        <span class=\"s2\">&quot; </span><span class=\"si\">{log}</span><span class=\"s2\">&quot;</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Move outputs into proper position.</span>\n    <span class=\"n\">output_base</span> <span class=\"o\">=</span> <span class=\"n\">basename_without_ext</span><span class=\"p\">(</span><span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"n\">html_path</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">tempdir</span><span class=\"p\">,</span> <span class=\"n\">output_base</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_fastqc.html&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">zip_path</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">tempdir</span><span class=\"p\">,</span> <span class=\"n\">output_base</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_fastqc.zip&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">html</span> <span class=\"o\">!=</span> <span class=\"n\">html_path</span><span class=\"p\">:</span>\n        <span class=\"n\">shell</span><span class=\"p\">(</span><span class=\"s2\">&quot;mv {html_path:q} {snakemake.output.html:q}&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">zip</span> <span class=\"o\">!=</span> <span class=\"n\">zip_path</span><span class=\"p\">:</span>\n        <span class=\"n\">shell</span><span class=\"p\">(</span><span class=\"s2\">&quot;mv {zip_path:q} {snakemake.output.zip:q}&quot;</span><span class=\"p\">)</span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 25}, "fastqc_qc_fwd": {"input": ["results/fastp/{sample}_R1.fastq"], "output": ["results/fastqc_qc/{sample}_R1.html", "results/fastqc_qc/{sample}_R1_fastqc.zip"], "conda_env": {"channels": ["conda-forge", "bioconda", "nodefaults"], "dependencies": ["fastqc =0.12.1", "snakemake-wrapper-utils =0.6.2"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span>\n<span class=\"normal\">45</span>\n<span class=\"normal\">46</span>\n<span class=\"normal\">47</span>\n<span class=\"normal\">48</span>\n<span class=\"normal\">49</span>\n<span class=\"normal\">50</span>\n<span class=\"normal\">51</span>\n<span class=\"normal\">52</span>\n<span class=\"normal\">53</span>\n<span class=\"normal\">54</span>\n<span class=\"normal\">55</span>\n<span class=\"normal\">56</span>\n<span class=\"normal\">57</span>\n<span class=\"normal\">58</span>\n<span class=\"normal\">59</span>\n<span class=\"normal\">60</span>\n<span class=\"normal\">61</span>\n<span class=\"normal\">62</span>\n<span class=\"normal\">63</span>\n<span class=\"normal\">64</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"sd\">&quot;&quot;&quot;Snakemake wrapper for fastqc.&quot;&quot;&quot;</span>\n\n<span class=\"n\">__author__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Julian de Ruiter&quot;</span>\n<span class=\"n\">__copyright__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Copyright 2017, Julian de Ruiter&quot;</span>\n<span class=\"n\">__email__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;julianderuiter@gmail.com&quot;</span>\n<span class=\"n\">__license__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;MIT&quot;</span>\n\n\n<span class=\"kn\">from</span> <span class=\"nn\">os</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tempfile</span> <span class=\"kn\">import</span> <span class=\"n\">TemporaryDirectory</span>\n<span class=\"kn\">from</span> <span class=\"nn\">snakemake.shell</span> <span class=\"kn\">import</span> <span class=\"n\">shell</span>\n<span class=\"kn\">from</span> <span class=\"nn\">snakemake_wrapper_utils.snakemake</span> <span class=\"kn\">import</span> <span class=\"n\">get_mem</span>\n\n<span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;extra&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">log_fmt_shell</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># Define memory per thread (https://github.com/s-andrews/FastQC/blob/master/fastqc#L201-L222)</span>\n<span class=\"n\">mem_mb</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">get_mem</span><span class=\"p\">(</span><span class=\"n\">snakemake</span><span class=\"p\">,</span> <span class=\"s2\">&quot;MiB&quot;</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">threads</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">basename_without_ext</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Returns basename of file path, without the file extension.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Remove file extension(s) (similar to the internal fastqc approach)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.gz$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.bz2$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.txt$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.fastq$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.fq$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.sam$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.bam$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">base</span>\n\n\n<span class=\"c1\"># If you have multiple input files fastqc doesn&#39;t know what to do. Taking silently only first gives unapreciated results</span>\n\n<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">IOError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Got multiple input files, I don&#39;t know how to process them!&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Run fastqc, since there can be race conditions if multiple jobs</span>\n<span class=\"c1\"># use the same fastqc dir, we create a temp dir.</span>\n<span class=\"k\">with</span> <span class=\"n\">TemporaryDirectory</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">tempdir</span><span class=\"p\">:</span>\n    <span class=\"n\">shell</span><span class=\"p\">(</span>\n        <span class=\"s2\">&quot;fastqc&quot;</span>\n        <span class=\"s2\">&quot; --threads </span><span class=\"si\">{snakemake.threads}</span><span class=\"s2\">&quot;</span>\n        <span class=\"s2\">&quot; --memory </span><span class=\"si\">{mem_mb}</span><span class=\"s2\">&quot;</span>\n        <span class=\"s2\">&quot; </span><span class=\"si\">{extra}</span><span class=\"s2\">&quot;</span>\n        <span class=\"s2\">&quot; --outdir {tempdir:q}&quot;</span>\n        <span class=\"s2\">&quot; {snakemake.input[0]:q}&quot;</span>\n        <span class=\"s2\">&quot; </span><span class=\"si\">{log}</span><span class=\"s2\">&quot;</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Move outputs into proper position.</span>\n    <span class=\"n\">output_base</span> <span class=\"o\">=</span> <span class=\"n\">basename_without_ext</span><span class=\"p\">(</span><span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"n\">html_path</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">tempdir</span><span class=\"p\">,</span> <span class=\"n\">output_base</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_fastqc.html&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">zip_path</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">tempdir</span><span class=\"p\">,</span> <span class=\"n\">output_base</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_fastqc.zip&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">html</span> <span class=\"o\">!=</span> <span class=\"n\">html_path</span><span class=\"p\">:</span>\n        <span class=\"n\">shell</span><span class=\"p\">(</span><span class=\"s2\">&quot;mv {html_path:q} {snakemake.output.html:q}&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">zip</span> <span class=\"o\">!=</span> <span class=\"n\">zip_path</span><span class=\"p\">:</span>\n        <span class=\"n\">shell</span><span class=\"p\">(</span><span class=\"s2\">&quot;mv {zip_path:q} {snakemake.output.zip:q}&quot;</span><span class=\"p\">)</span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 25}, "fastp_pe": {"input": ["<function>"], "output": ["results/fastp/{sample}_R1.fastq", "results/fastp/{sample}_R2.fastq", "results/fastp/{sample}_u1.fastq", "results/fastp/{sample}_u2.fastq", "results/fastp/{sample}.failed.fastq", "results/fastp/{sample}_fastp.html", "results/fastp/{sample}_fastp.json"], "conda_env": {"channels": ["conda-forge", "bioconda", "nodefaults"], "dependencies": ["fastp =0.23.4"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span>\n<span class=\"normal\">45</span>\n<span class=\"normal\">46</span>\n<span class=\"normal\">47</span>\n<span class=\"normal\">48</span>\n<span class=\"normal\">49</span>\n<span class=\"normal\">50</span>\n<span class=\"normal\">51</span>\n<span class=\"normal\">52</span>\n<span class=\"normal\">53</span>\n<span class=\"normal\">54</span>\n<span class=\"normal\">55</span>\n<span class=\"normal\">56</span>\n<span class=\"normal\">57</span>\n<span class=\"normal\">58</span>\n<span class=\"normal\">59</span>\n<span class=\"normal\">60</span>\n<span class=\"normal\">61</span>\n<span class=\"normal\">62</span>\n<span class=\"normal\">63</span>\n<span class=\"normal\">64</span>\n<span class=\"normal\">65</span>\n<span class=\"normal\">66</span>\n<span class=\"normal\">67</span>\n<span class=\"normal\">68</span>\n<span class=\"normal\">69</span>\n<span class=\"normal\">70</span>\n<span class=\"normal\">71</span>\n<span class=\"normal\">72</span>\n<span class=\"normal\">73</span>\n<span class=\"normal\">74</span>\n<span class=\"normal\">75</span>\n<span class=\"normal\">76</span>\n<span class=\"normal\">77</span>\n<span class=\"normal\">78</span>\n<span class=\"normal\">79</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"n\">__author__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Sebastian Kurscheid&quot;</span>\n<span class=\"n\">__copyright__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Copyright 2019, Sebastian Kurscheid&quot;</span>\n<span class=\"n\">__email__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;sebastian.kurscheid@anu.edu.au&quot;</span>\n<span class=\"n\">__license__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;MIT&quot;</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">snakemake.shell</span> <span class=\"kn\">import</span> <span class=\"n\">shell</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;extra&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">adapters</span> <span class=\"o\">=</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;adapters&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">log_fmt_shell</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Assert input</span>\n<span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"p\">(</span>\n    <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">or</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n<span class=\"p\">),</span> <span class=\"s2\">&quot;input-&gt;sample must have 1 (single-end) or 2 (paired-end) elements.&quot;</span>\n\n\n<span class=\"c1\"># Input files</span>\n<span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n    <span class=\"n\">reads</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;--in1 </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">reads</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;--in1 </span><span class=\"si\">{}</span><span class=\"s2\"> --in2 </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Output files</span>\n<span class=\"n\">trimmed_paths</span> <span class=\"o\">=</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;trimmed&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">trimmed_paths</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"n\">trimmed</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;--out1 </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">trimmed</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">trimmed</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;--out1 </span><span class=\"si\">{}</span><span class=\"s2\"> --out2 </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">trimmed</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Output unpaired files</span>\n        <span class=\"n\">unpaired</span> <span class=\"o\">=</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;unpaired&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">unpaired</span><span class=\"p\">:</span>\n            <span class=\"n\">trimmed</span> <span class=\"o\">+=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --unpaired1 </span><span class=\"si\">{</span><span class=\"n\">unpaired</span><span class=\"si\">}</span><span class=\"s2\"> --unpaired2 </span><span class=\"si\">{</span><span class=\"n\">unpaired</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">unpaired1</span> <span class=\"o\">=</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;unpaired1&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">unpaired1</span><span class=\"p\">:</span>\n                <span class=\"n\">trimmed</span> <span class=\"o\">+=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --unpaired1 </span><span class=\"si\">{</span><span class=\"n\">unpaired1</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"n\">unpaired2</span> <span class=\"o\">=</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;unpaired2&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">unpaired2</span><span class=\"p\">:</span>\n                <span class=\"n\">trimmed</span> <span class=\"o\">+=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --unpaired2 </span><span class=\"si\">{</span><span class=\"n\">unpaired2</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n        <span class=\"c1\"># Output merged PE reads</span>\n        <span class=\"n\">merged</span> <span class=\"o\">=</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;merged&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">merged</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;--merge\\b&quot;</span><span class=\"p\">,</span> <span class=\"n\">extra</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;output.merged specified but &#39;--merge&#39; option missing from params.extra&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">trimmed</span> <span class=\"o\">+=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --merged_out </span><span class=\"si\">{</span><span class=\"n\">merged</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">trimmed</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n\n\n<span class=\"c1\"># Output failed reads</span>\n<span class=\"n\">failed</span> <span class=\"o\">=</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;failed&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">failed</span><span class=\"p\">:</span>\n    <span class=\"n\">trimmed</span> <span class=\"o\">+=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot; --failed_out </span><span class=\"si\">{</span><span class=\"n\">failed</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n\n<span class=\"c1\"># Stats</span>\n<span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;--html </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">html</span><span class=\"p\">)</span>\n<span class=\"n\">json</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;--json </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">shell</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;(fastp --thread </span><span class=\"si\">{snakemake.threads}</span><span class=\"s2\"> &quot;</span>\n    <span class=\"s2\">&quot;</span><span class=\"si\">{extra}</span><span class=\"s2\"> &quot;</span>\n    <span class=\"s2\">&quot;</span><span class=\"si\">{adapters}</span><span class=\"s2\"> &quot;</span>\n    <span class=\"s2\">&quot;</span><span class=\"si\">{reads}</span><span class=\"s2\"> &quot;</span>\n    <span class=\"s2\">&quot;</span><span class=\"si\">{trimmed}</span><span class=\"s2\"> &quot;</span>\n    <span class=\"s2\">&quot;</span><span class=\"si\">{json}</span><span class=\"s2\"> &quot;</span>\n    <span class=\"s2\">&quot;</span><span class=\"si\">{html}</span><span class=\"s2\"> ) </span><span class=\"si\">{log}</span><span class=\"s2\">&quot;</span>\n<span class=\"p\">)</span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 25}, "fastqc_qc_rev": {"input": ["results/fastp/{sample}_R2.fastq"], "output": ["results/fastqc_qc/{sample}_R2.html", "results/fastqc_qc/{sample}_R2_fastqc.zip"], "conda_env": {"channels": ["conda-forge", "bioconda", "nodefaults"], "dependencies": ["fastqc =0.12.1", "snakemake-wrapper-utils =0.6.2"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span>\n<span class=\"normal\">21</span>\n<span class=\"normal\">22</span>\n<span class=\"normal\">23</span>\n<span class=\"normal\">24</span>\n<span class=\"normal\">25</span>\n<span class=\"normal\">26</span>\n<span class=\"normal\">27</span>\n<span class=\"normal\">28</span>\n<span class=\"normal\">29</span>\n<span class=\"normal\">30</span>\n<span class=\"normal\">31</span>\n<span class=\"normal\">32</span>\n<span class=\"normal\">33</span>\n<span class=\"normal\">34</span>\n<span class=\"normal\">35</span>\n<span class=\"normal\">36</span>\n<span class=\"normal\">37</span>\n<span class=\"normal\">38</span>\n<span class=\"normal\">39</span>\n<span class=\"normal\">40</span>\n<span class=\"normal\">41</span>\n<span class=\"normal\">42</span>\n<span class=\"normal\">43</span>\n<span class=\"normal\">44</span>\n<span class=\"normal\">45</span>\n<span class=\"normal\">46</span>\n<span class=\"normal\">47</span>\n<span class=\"normal\">48</span>\n<span class=\"normal\">49</span>\n<span class=\"normal\">50</span>\n<span class=\"normal\">51</span>\n<span class=\"normal\">52</span>\n<span class=\"normal\">53</span>\n<span class=\"normal\">54</span>\n<span class=\"normal\">55</span>\n<span class=\"normal\">56</span>\n<span class=\"normal\">57</span>\n<span class=\"normal\">58</span>\n<span class=\"normal\">59</span>\n<span class=\"normal\">60</span>\n<span class=\"normal\">61</span>\n<span class=\"normal\">62</span>\n<span class=\"normal\">63</span>\n<span class=\"normal\">64</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"sd\">&quot;&quot;&quot;Snakemake wrapper for fastqc.&quot;&quot;&quot;</span>\n\n<span class=\"n\">__author__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Julian de Ruiter&quot;</span>\n<span class=\"n\">__copyright__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Copyright 2017, Julian de Ruiter&quot;</span>\n<span class=\"n\">__email__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;julianderuiter@gmail.com&quot;</span>\n<span class=\"n\">__license__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;MIT&quot;</span>\n\n\n<span class=\"kn\">from</span> <span class=\"nn\">os</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tempfile</span> <span class=\"kn\">import</span> <span class=\"n\">TemporaryDirectory</span>\n<span class=\"kn\">from</span> <span class=\"nn\">snakemake.shell</span> <span class=\"kn\">import</span> <span class=\"n\">shell</span>\n<span class=\"kn\">from</span> <span class=\"nn\">snakemake_wrapper_utils.snakemake</span> <span class=\"kn\">import</span> <span class=\"n\">get_mem</span>\n\n<span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;extra&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">log</span> <span class=\"o\">=</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">log_fmt_shell</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># Define memory per thread (https://github.com/s-andrews/FastQC/blob/master/fastqc#L201-L222)</span>\n<span class=\"n\">mem_mb</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">get_mem</span><span class=\"p\">(</span><span class=\"n\">snakemake</span><span class=\"p\">,</span> <span class=\"s2\">&quot;MiB&quot;</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">threads</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">basename_without_ext</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">&quot;&quot;&quot;Returns basename of file path, without the file extension.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Remove file extension(s) (similar to the internal fastqc approach)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.gz$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.bz2$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.txt$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.fastq$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.fq$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.sam$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n    <span class=\"n\">base</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">.bam$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">base</span>\n\n\n<span class=\"c1\"># If you have multiple input files fastqc doesn&#39;t know what to do. Taking silently only first gives unapreciated results</span>\n\n<span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">IOError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Got multiple input files, I don&#39;t know how to process them!&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Run fastqc, since there can be race conditions if multiple jobs</span>\n<span class=\"c1\"># use the same fastqc dir, we create a temp dir.</span>\n<span class=\"k\">with</span> <span class=\"n\">TemporaryDirectory</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">tempdir</span><span class=\"p\">:</span>\n    <span class=\"n\">shell</span><span class=\"p\">(</span>\n        <span class=\"s2\">&quot;fastqc&quot;</span>\n        <span class=\"s2\">&quot; --threads </span><span class=\"si\">{snakemake.threads}</span><span class=\"s2\">&quot;</span>\n        <span class=\"s2\">&quot; --memory </span><span class=\"si\">{mem_mb}</span><span class=\"s2\">&quot;</span>\n        <span class=\"s2\">&quot; </span><span class=\"si\">{extra}</span><span class=\"s2\">&quot;</span>\n        <span class=\"s2\">&quot; --outdir {tempdir:q}&quot;</span>\n        <span class=\"s2\">&quot; {snakemake.input[0]:q}&quot;</span>\n        <span class=\"s2\">&quot; </span><span class=\"si\">{log}</span><span class=\"s2\">&quot;</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Move outputs into proper position.</span>\n    <span class=\"n\">output_base</span> <span class=\"o\">=</span> <span class=\"n\">basename_without_ext</span><span class=\"p\">(</span><span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"n\">html_path</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">tempdir</span><span class=\"p\">,</span> <span class=\"n\">output_base</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_fastqc.html&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">zip_path</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">tempdir</span><span class=\"p\">,</span> <span class=\"n\">output_base</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_fastqc.zip&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">html</span> <span class=\"o\">!=</span> <span class=\"n\">html_path</span><span class=\"p\">:</span>\n        <span class=\"n\">shell</span><span class=\"p\">(</span><span class=\"s2\">&quot;mv {html_path:q} {snakemake.output.html:q}&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">snakemake</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">zip</span> <span class=\"o\">!=</span> <span class=\"n\">zip_path</span><span class=\"p\">:</span>\n        <span class=\"n\">shell</span><span class=\"p\">(</span><span class=\"s2\">&quot;mv {zip_path:q} {snakemake.output.zip:q}&quot;</span><span class=\"p\">)</span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 25}, "summarise": {"input": ["results/seqkit/Adelpha_iphiclus.ok", "results/seqkit/Anartia_jatrophae_saturata.ok", "results/seqkit/Araschnia_levana.ok", "results/seqkit/Auzakia_danava.ok", "results/seqkit/Baeotus_beotus.ok", "results/seqkit/Catacroptera_cloanthe.ok", "results/seqkit/Chalinga_pratti.ok", "results/seqkit/Diaethria_gabaza_eupepla.ok", "results/seqkit/Doleschallia_melana.ok", "results/seqkit/Eurema_blanda.ok", "results/seqkit/Hypolimnas_usambara.ok", "results/seqkit/Junonia_villida.ok", "results/seqkit/Kallima_paralekta.ok", "results/seqkit/Kallimoides_rumia.ok", "results/seqkit/Litinga_cottini.ok", "results/seqkit/Mallika_jacksoni.ok", "results/seqkit/Moduza_procris.ok", "results/seqkit/Parasarpa_zayla.ok", "results/seqkit/Phaedyma_columella.ok", "results/seqkit/Precis_pelarga.ok", "results/seqkit/Protogoniomorpha_temora.ok", "results/seqkit/Salamis_cacta.ok", "results/seqkit/Smyrna_blomfildia.ok", "results/seqkit/Tacola_larymna.ok", "results/seqkit/Yoma_algina.ok", "results/blobtools/Adelpha_iphiclus/Adelpha_iphiclus_filter.ok", "results/blobtools/Anartia_jatrophae_saturata/Anartia_jatrophae_saturata_filter.ok", "results/blobtools/Araschnia_levana/Araschnia_levana_filter.ok", "results/blobtools/Auzakia_danava/Auzakia_danava_filter.ok", "results/blobtools/Baeotus_beotus/Baeotus_beotus_filter.ok", "results/blobtools/Catacroptera_cloanthe/Catacroptera_cloanthe_filter.ok", "results/blobtools/Chalinga_pratti/Chalinga_pratti_filter.ok", "results/blobtools/Diaethria_gabaza_eupepla/Diaethria_gabaza_eupepla_filter.ok", "results/blobtools/Doleschallia_melana/Doleschallia_melana_filter.ok", "results/blobtools/Eurema_blanda/Eurema_blanda_filter.ok", "results/blobtools/Hypolimnas_usambara/Hypolimnas_usambara_filter.ok", "results/blobtools/Junonia_villida/Junonia_villida_filter.ok", "results/blobtools/Kallima_paralekta/Kallima_paralekta_filter.ok", "results/blobtools/Kallimoides_rumia/Kallimoides_rumia_filter.ok", "results/blobtools/Litinga_cottini/Litinga_cottini_filter.ok", "results/blobtools/Mallika_jacksoni/Mallika_jacksoni_filter.ok", "results/blobtools/Moduza_procris/Moduza_procris_filter.ok", "results/blobtools/Parasarpa_zayla/Parasarpa_zayla_filter.ok", "results/blobtools/Phaedyma_columella/Phaedyma_columella_filter.ok", "results/blobtools/Precis_pelarga/Precis_pelarga_filter.ok", "results/blobtools/Protogoniomorpha_temora/Protogoniomorpha_temora_filter.ok", "results/blobtools/Salamis_cacta/Salamis_cacta_filter.ok", "results/blobtools/Smyrna_blomfildia/Smyrna_blomfildia_filter.ok", "results/blobtools/Tacola_larymna/Tacola_larymna_filter.ok", "results/blobtools/Yoma_algina/Yoma_algina_filter.ok", "results/annotations/Adelpha_iphiclus/Adelpha_iphiclus.ok", "results/annotations/Anartia_jatrophae_saturata/Anartia_jatrophae_saturata.ok", "results/annotations/Araschnia_levana/Araschnia_levana.ok", "results/annotations/Auzakia_danava/Auzakia_danava.ok", "results/annotations/Baeotus_beotus/Baeotus_beotus.ok", "results/annotations/Catacroptera_cloanthe/Catacroptera_cloanthe.ok", "results/annotations/Chalinga_pratti/Chalinga_pratti.ok", "results/annotations/Diaethria_gabaza_eupepla/Diaethria_gabaza_eupepla.ok", "results/annotations/Doleschallia_melana/Doleschallia_melana.ok", "results/annotations/Eurema_blanda/Eurema_blanda.ok", "results/annotations/Hypolimnas_usambara/Hypolimnas_usambara.ok", "results/annotations/Junonia_villida/Junonia_villida.ok", "results/annotations/Kallima_paralekta/Kallima_paralekta.ok", "results/annotations/Kallimoides_rumia/Kallimoides_rumia.ok", "results/annotations/Litinga_cottini/Litinga_cottini.ok", "results/annotations/Mallika_jacksoni/Mallika_jacksoni.ok", "results/annotations/Moduza_procris/Moduza_procris.ok", "results/annotations/Parasarpa_zayla/Parasarpa_zayla.ok", "results/annotations/Phaedyma_columella/Phaedyma_columella.ok", "results/annotations/Precis_pelarga/Precis_pelarga.ok", "results/annotations/Protogoniomorpha_temora/Protogoniomorpha_temora.ok", "results/annotations/Salamis_cacta/Salamis_cacta.ok", "results/annotations/Smyrna_blomfildia/Smyrna_blomfildia.ok", "results/annotations/Tacola_larymna/Tacola_larymna.ok", "results/annotations/Yoma_algina/Yoma_algina.ok", "results/assess_assembly/Adelpha_iphiclus.ok", "results/assess_assembly/Anartia_jatrophae_saturata.ok", "results/assess_assembly/Araschnia_levana.ok", "results/assess_assembly/Auzakia_danava.ok", "results/assess_assembly/Baeotus_beotus.ok", "results/assess_assembly/Catacroptera_cloanthe.ok", "results/assess_assembly/Chalinga_pratti.ok", "results/assess_assembly/Diaethria_gabaza_eupepla.ok", "results/assess_assembly/Doleschallia_melana.ok", "results/assess_assembly/Eurema_blanda.ok", "results/assess_assembly/Hypolimnas_usambara.ok", "results/assess_assembly/Junonia_villida.ok", "results/assess_assembly/Kallima_paralekta.ok", "results/assess_assembly/Kallimoides_rumia.ok", "results/assess_assembly/Litinga_cottini.ok", "results/assess_assembly/Mallika_jacksoni.ok", "results/assess_assembly/Moduza_procris.ok", "results/assess_assembly/Parasarpa_zayla.ok", "results/assess_assembly/Phaedyma_columella.ok", "results/assess_assembly/Precis_pelarga.ok", "results/assess_assembly/Protogoniomorpha_temora.ok", "results/assess_assembly/Salamis_cacta.ok", "results/assess_assembly/Smyrna_blomfildia.ok", "results/assess_assembly/Tacola_larymna.ok", "results/assess_assembly/Yoma_algina.ok"], "output": ["results/summary/summary_sample.txt", "results/summary/summary_contig.txt"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["r-base =4.3.2", "r-tidyverse", "bioconductor-ggtree =3.8.0"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\"># cat seqkit output for each sample</span>\n<span class=\"w\">        </span><span class=\"nb\">echo</span><span class=\"w\"> </span>-e<span class=\"w\"> </span><span class=\"s2\">&quot;sample format type num_seqs sum_len min_len avg_len max_len&quot;</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span>results/summary/tmp_summary_sample.txt\n<span class=\"w\">        </span>cat<span class=\"w\"> </span>results/seqkit/*.txt<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>grep<span class=\"w\"> </span>file<span class=\"w\"> </span>-v<span class=\"w\"> </span>&gt;&gt;<span class=\"w\"> </span>results/summary/tmp_summary_sample.txt\n<span class=\"w\">        </span>column<span class=\"w\"> </span>-t<span class=\"w\"> </span>results/summary/tmp_summary_sample.txt<span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>output.table_sample<span class=\"o\">}</span>\n<span class=\"w\">        </span>rm<span class=\"w\"> </span>results/summary/tmp_summary_sample.txt\n<span class=\"w\">        </span><span class=\"c1\"># join blobtools with mitos annotations for each contig</span>\n<span class=\"w\">        </span>Rscript<span class=\"w\"> </span>workflow/scripts/summarise.R<span class=\"w\"> </span>results/<span class=\"w\"> </span>mitos<span class=\"w\"> </span><span class=\"o\">{</span>output.table_contig<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 1}, "seqkit": {"input": ["results/assembled_sequence/{sample}.ok"], "output": ["results/seqkit/{sample}.ok"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["seqkit =2.3.1"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span><span class=\"nv\">FAS</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span>results/assembled_sequence/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.fasta<span class=\"k\">)</span>\n<span class=\"w\">        </span><span class=\"nv\">OUT</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span>results/seqkit/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.txt<span class=\"k\">)</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span>-e<span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span><span class=\"nb\">echo</span><span class=\"w\"> </span>Running<span class=\"w\"> </span>seqkit<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">            </span>seqkit<span class=\"w\"> </span>stats<span class=\"w\"> </span>-b<span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"nv\">$OUT</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"nb\">echo</span><span class=\"w\"> </span>No<span class=\"w\"> </span>assembled<span class=\"w\"> </span>sequence<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span><span class=\"k\">fi</span>\n<span class=\"w\">        </span>touch<span class=\"w\"> </span><span class=\"o\">{</span>output.ok<span class=\"o\">}</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 25}, "assembled_sequence": {"input": ["results/getorganelle/{sample}/getorganelle.ok"], "output": ["results/assembled_sequence/{sample}.ok"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["snakemake-minimal =8.4.12", "jinja2 =3.1.2", "networkx =3.1", "matplotlib =3.7.1", "graphviz =8.0.5", "pandas =2.0.1"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\"># find selected path(s) fasta</span>\n<span class=\"w\">        </span><span class=\"nv\">FAS</span><span class=\"o\">=</span><span class=\"k\">$(</span>find<span class=\"w\"> </span>results/getorganelle/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>/<span class=\"w\"> </span>-name<span class=\"w\"> </span>*path_sequence.fasta<span class=\"k\">)</span>\n<span class=\"w\">        </span><span class=\"c1\"># z option: true if length if string is zero.</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"w\"> </span>-z<span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"w\"> </span><span class=\"o\">]]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span><span class=\"nb\">echo</span><span class=\"w\"> </span>No<span class=\"w\"> </span>assembly<span class=\"w\"> </span>produced<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span><span class=\"c1\"># more than one selected path</span>\n<span class=\"w\">        </span><span class=\"k\">elif</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span><span class=\"s2\">&quot;</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>tr<span class=\"w\"> </span><span class=\"s1\">&#39; &#39;</span><span class=\"w\"> </span><span class=\"s1\">&#39;\\n&#39;</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>wc<span class=\"w\"> </span>-l<span class=\"k\">)</span><span class=\"s2\">&quot;</span><span class=\"w\"> </span>-gt<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span><span class=\"nv\">FAS1</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>tr<span class=\"w\"> </span><span class=\"s1\">&#39; &#39;</span><span class=\"w\"> </span><span class=\"s1\">&#39;\\n&#39;</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>head<span class=\"w\"> </span>-n<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"k\">)</span>\n<span class=\"w\">            </span><span class=\"nb\">echo</span><span class=\"w\"> </span>More<span class=\"w\"> </span>than<span class=\"w\"> </span>one<span class=\"w\"> </span>assembly<span class=\"w\"> </span>produced<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">            </span><span class=\"nb\">echo</span><span class=\"w\"> </span>Selecting<span class=\"w\"> </span>the<span class=\"w\"> </span>first<span class=\"w\"> </span>assembly<span class=\"w\"> </span><span class=\"nv\">$FAS1</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">            </span>python<span class=\"w\"> </span>workflow/scripts/rename_assembled.py<span class=\"w\">                 </span>--input<span class=\"w\"> </span><span class=\"nv\">$FAS1</span><span class=\"w\">                 </span>--sample<span class=\"w\"> </span><span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\">                 </span>--output<span class=\"w\"> </span>results/assembled_sequence\n<span class=\"w\">        </span><span class=\"k\">elif</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span><span class=\"s2\">&quot;</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>tr<span class=\"w\"> </span><span class=\"s1\">&#39; &#39;</span><span class=\"w\"> </span><span class=\"s1\">&#39;\\n&#39;</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>wc<span class=\"w\"> </span>-l<span class=\"k\">)</span><span class=\"s2\">&quot;</span><span class=\"w\"> </span>-eq<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span><span class=\"nb\">echo</span><span class=\"w\"> </span>One<span class=\"w\"> </span>assembly<span class=\"w\"> </span>produced<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">            </span>python<span class=\"w\"> </span>workflow/scripts/rename_assembled.py<span class=\"w\">                 </span>--input<span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"w\">                 </span>--sample<span class=\"w\"> </span><span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\">                 </span>--output<span class=\"w\"> </span>results/assembled_sequence\n<span class=\"w\">        </span><span class=\"k\">fi</span>\n<span class=\"w\">        </span>touch<span class=\"w\"> </span><span class=\"o\">{</span>output.ok<span class=\"o\">}</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 25}, "getorganelle": {"input": ["results/fastp/{sample}_R1.fastq", "results/fastp/{sample}_R2.fastq"], "output": ["results/getorganelle/{sample}/getorganelle.ok"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["getorganelle =1.7.7.0", "spades =3.15.5", "scipy =1.11.3"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">            </span>get_organelle_from_reads.py<span class=\"w\">                 </span>-1<span class=\"w\"> </span><span class=\"o\">{</span>input.fwd<span class=\"o\">}</span><span class=\"w\">                 </span>-2<span class=\"w\"> </span><span class=\"o\">{</span>input.rev<span class=\"o\">}</span><span class=\"w\">                 </span>-o<span class=\"w\"> </span>results/getorganelle/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\">                 </span>-F<span class=\"w\"> </span>animal_mt<span class=\"w\">                 </span>-s<span class=\"w\"> </span>results/go_fetch/<span class=\"o\">{</span>params.taxid<span class=\"o\">}</span>/seed.fasta<span class=\"w\">                 </span>--genes<span class=\"w\"> </span>results/go_fetch/<span class=\"o\">{</span>params.taxid<span class=\"o\">}</span>/gene.fasta<span class=\"w\">                 </span>--reduce-reads-for-coverage<span class=\"w\"> </span>inf<span class=\"w\">                 </span>--max-reads<span class=\"w\"> </span>inf<span class=\"w\">                 </span>-R<span class=\"w\"> </span><span class=\"m\">20</span><span class=\"w\">                 </span>--overwrite<span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">            </span>touch<span class=\"w\"> </span><span class=\"o\">{</span>output.ok<span class=\"o\">}</span>\n<span class=\"w\">            </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 25}, "blobtools_filter": {"input": ["results/blobtools/{sample}/{sample}_create.ok"], "output": ["results/blobtools/{sample}/{sample}_filter.ok"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["python=3.9", "pip", {"pip": ["blobtoolkit==4.3"]}]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span><span class=\"nv\">FAS</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span>results/assembled_sequence/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.fasta<span class=\"k\">)</span>\n<span class=\"w\">        </span><span class=\"nv\">BLA</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span>results/blastn/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.txt<span class=\"k\">)</span>\n<span class=\"w\">        </span><span class=\"nv\">MAP</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span>results/minimap/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.bam<span class=\"k\">)</span>\n<span class=\"w\">        </span><span class=\"nv\">OUT</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span>results/blobtools/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>/table.tsv<span class=\"k\">)</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span>-e<span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span>blobtools<span class=\"w\"> </span>filter<span class=\"w\">                 </span>--table<span class=\"w\"> </span><span class=\"nv\">$OUT</span><span class=\"w\">                 </span>--table-fields<span class=\"w\"> </span>gc,length,<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>_cov,bestsumorder_superkingdom,bestsumorder_kingdom,bestsumorder_phylum,bestsumorder_class,bestsumorder_order,bestsumorder_family,bestsumorder_species<span class=\"w\">                 </span>results/blobtools/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"nb\">echo</span><span class=\"w\"> </span>No<span class=\"w\"> </span>assembled<span class=\"w\"> </span>sequence<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span><span class=\"k\">fi</span>\n<span class=\"w\">        </span>touch<span class=\"w\"> </span><span class=\"o\">{</span>output.ok<span class=\"o\">}</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 25}, "blobtools_create": {"input": ["resources/taxdump", "resources/taxdump/citations.dmp", "resources/taxdump/delnodes.dmp", "resources/taxdump/division.dmp", "resources/taxdump/excludedfromtype.dmp", "resources/taxdump/fullnamelineage.dmp", "resources/taxdump/gencode.dmp", "resources/taxdump/host.dmp", "resources/taxdump/images.dmp", "resources/taxdump/merged.dmp", "resources/taxdump/names.dmp", "resources/taxdump/nodes.dmp", "resources/taxdump/rankedlineage.dmp", "resources/taxdump/taxidlineage.dmp", "resources/taxdump/typematerial.dmp", "resources/taxdump/typeoftype.dmp", "results/assembled_sequence/{sample}.ok", "results/blastn/{sample}.ok", "results/minimap/{sample}.ok"], "output": ["results/blobtools/{sample}/{sample}_create.ok"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["python=3.9", "pip", {"pip": ["blobtoolkit==4.3"]}]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span><span class=\"nv\">FAS</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span>results/assembled_sequence/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.fasta<span class=\"k\">)</span>\n<span class=\"w\">        </span><span class=\"nv\">BLA</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span>results/blastn/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.txt<span class=\"k\">)</span>\n<span class=\"w\">        </span><span class=\"nv\">MAP</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span>results/minimap/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.bam<span class=\"k\">)</span>\n<span class=\"w\">        </span><span class=\"nv\">OUT</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span>results/blobtools/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>/table.tsv<span class=\"k\">)</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span>-e<span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span>blobtools<span class=\"w\"> </span>create<span class=\"w\">                 </span>--fasta<span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"w\">                 </span>--hits<span class=\"w\"> </span><span class=\"nv\">$BLA</span><span class=\"w\">                 </span>--taxrule<span class=\"w\"> </span>bestsumorder<span class=\"w\">                 </span>--taxdump<span class=\"w\"> </span>resources/taxdump<span class=\"w\">                 </span>--cov<span class=\"w\"> </span><span class=\"nv\">$MAP</span><span class=\"w\">                 </span>results/blobtools/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"nb\">echo</span><span class=\"w\"> </span>No<span class=\"w\"> </span>assembled<span class=\"w\"> </span>sequence<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span><span class=\"k\">fi</span>\n<span class=\"w\">        </span>touch<span class=\"w\"> </span><span class=\"o\">{</span>output.ok<span class=\"o\">}</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 25}, "taxdump": {"input": ["resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.ndb", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.nhr", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.nin", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.njs", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.nog", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.nos", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.not", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.nsq", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.ntf", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.nto"], "output": ["resources/taxdump", "resources/taxdump/citations.dmp", "resources/taxdump/delnodes.dmp", "resources/taxdump/division.dmp", "resources/taxdump/excludedfromtype.dmp", "resources/taxdump/fullnamelineage.dmp", "resources/taxdump/gencode.dmp", "resources/taxdump/host.dmp", "resources/taxdump/images.dmp", "resources/taxdump/merged.dmp", "resources/taxdump/names.dmp", "resources/taxdump/nodes.dmp", "resources/taxdump/rankedlineage.dmp", "resources/taxdump/taxidlineage.dmp", "resources/taxdump/typematerial.dmp", "resources/taxdump/typeoftype.dmp"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["snakemake-minimal =8.4.12", "jinja2 =3.1.2", "networkx =3.1", "matplotlib =3.7.1", "graphviz =8.0.5", "pandas =2.0.1"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span>wget<span class=\"w\"> </span>--wait<span class=\"w\"> </span><span class=\"m\">10</span><span class=\"w\"> </span>--random-wait<span class=\"w\"> </span>-P<span class=\"w\"> </span>resources/taxdump/<span class=\"w\"> </span>https://ftp.ncbi.nih.gov/pub/taxonomy/new_taxdump/new_taxdump.tar.gz<span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span>tar<span class=\"w\"> </span>xvzf<span class=\"w\"> </span>resources/taxdump/new_taxdump.tar.gz<span class=\"w\"> </span>--directory<span class=\"w\"> </span>resources/taxdump/<span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span>rm<span class=\"w\"> </span>resources/taxdump/new_taxdump.tar.gz<span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 1}, "blastdb": {"input": [], "output": ["resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.ndb", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.nhr", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.nin", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.njs", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.nog", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.nos", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.not", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.nsq", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.ntf", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.nto"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["snakemake-minimal =8.4.12", "jinja2 =3.1.2", "networkx =3.1", "matplotlib =3.7.1", "graphviz =8.0.5", "pandas =2.0.1"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span>rm<span class=\"w\"> </span>-f<span class=\"w\"> </span>resources/blastdb/refseq_mitochondrion.tar.gz\n<span class=\"w\">        </span>wget<span class=\"w\"> </span>--wait<span class=\"w\"> </span><span class=\"m\">10</span><span class=\"w\"> </span>--random-wait<span class=\"w\"> </span>-P<span class=\"w\"> </span>resources/blastdb/<span class=\"w\"> </span>https://zenodo.org/records/8424777/files/refseq_mitochondrion.tar.gz<span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span>tar<span class=\"w\"> </span>xvzf<span class=\"w\"> </span>resources/blastdb/refseq_mitochondrion.tar.gz<span class=\"w\"> </span>--directory<span class=\"w\"> </span>resources/blastdb/<span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span>rm<span class=\"w\"> </span>resources/blastdb/refseq_mitochondrion.tar.gz<span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 1}, "blastn": {"input": ["resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.ndb", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.nhr", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.nin", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.njs", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.nog", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.nos", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.not", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.nsq", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.ntf", "resources/blastdb/refseq_mitochondrion/refseq_mitochondrion.nto", "results/assembled_sequence/{sample}.ok"], "output": ["results/blastn/{sample}.ok"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["blast =2.13.0"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span><span class=\"nv\">FAS</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span>results/assembled_sequence/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.fasta<span class=\"k\">)</span>\n<span class=\"w\">        </span><span class=\"nv\">OUT</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span>results/blastn/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.txt<span class=\"k\">)</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span>-e<span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span><span class=\"nb\">echo</span><span class=\"w\"> </span>Running<span class=\"w\"> </span>blastn<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">            </span>blastn<span class=\"w\">                </span>-query<span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"w\">                </span>-db<span class=\"w\"> </span>resources/blastdb/refseq_mitochondrion/refseq_mitochondrion<span class=\"w\">                </span>-out<span class=\"w\"> </span><span class=\"nv\">$OUT</span><span class=\"w\">                </span>-outfmt<span class=\"w\"> </span><span class=\"s1\">&#39;6 qseqid staxids bitscore std&#39;</span><span class=\"w\">                </span>-max_target_seqs<span class=\"w\"> </span><span class=\"m\">10</span><span class=\"w\">                </span>-max_hsps<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\">                </span>-evalue<span class=\"w\"> </span>1e-25<span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"nb\">echo</span><span class=\"w\"> </span>No<span class=\"w\"> </span>assembled<span class=\"w\"> </span>sequence<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span><span class=\"k\">fi</span>\n<span class=\"w\">        </span>touch<span class=\"w\"> </span><span class=\"o\">{</span>output.ok<span class=\"o\">}</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 25}, "minimap": {"input": ["results/assembled_sequence/{sample}.ok", "results/fastp/{sample}_R1.fastq", "results/fastp/{sample}_R2.fastq"], "output": ["results/minimap/{sample}.ok"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["minimap2 =2.24", "samtools =1.15.1"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span><span class=\"nv\">FAS</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span>results/assembled_sequence/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.fasta<span class=\"k\">)</span>\n<span class=\"w\">        </span><span class=\"nv\">OUT</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span>results/minimap/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.bam<span class=\"k\">)</span>\n<span class=\"w\">        </span><span class=\"nv\">STA</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span>results/minimap/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>_stats.txt<span class=\"k\">)</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span>-e<span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span><span class=\"nb\">echo</span><span class=\"w\"> </span>Running<span class=\"w\"> </span>minimap<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">            </span>minimap2<span class=\"w\"> </span>-ax<span class=\"w\"> </span>sr<span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"w\"> </span><span class=\"o\">{</span>input.fwd<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span>input.rev<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"m\">2</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>samtools<span class=\"w\"> </span>view<span class=\"w\"> </span>-b<span class=\"w\"> </span>-F<span class=\"w\"> </span><span class=\"m\">4</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>samtools<span class=\"w\"> </span>sort<span class=\"w\"> </span>-O<span class=\"w\"> </span>BAM<span class=\"w\"> </span>-o<span class=\"w\"> </span><span class=\"nv\">$OUT</span><span class=\"w\"> </span>-<span class=\"w\"> </span><span class=\"m\">2</span>&gt;&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">            </span>samtools<span class=\"w\"> </span>index<span class=\"w\"> </span><span class=\"nv\">$OUT</span><span class=\"w\"> </span><span class=\"m\">2</span>&gt;&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">            </span>samtools<span class=\"w\"> </span>index<span class=\"w\"> </span>-c<span class=\"w\"> </span><span class=\"nv\">$OUT</span><span class=\"w\"> </span><span class=\"m\">2</span>&gt;&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">            </span>samtools<span class=\"w\"> </span>stats<span class=\"w\"> </span><span class=\"nv\">$OUT</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"nv\">$STA</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"nb\">echo</span><span class=\"w\"> </span>No<span class=\"w\"> </span>assembled<span class=\"w\"> </span>sequence<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span><span class=\"k\">fi</span>\n<span class=\"w\">        </span>touch<span class=\"w\"> </span><span class=\"o\">{</span>output.ok<span class=\"o\">}</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 25}, "annotations": {"input": ["resources/mitos_db/refseq39", "results/assembled_sequence/{sample}.ok"], "output": ["results/annotations/{sample}/{sample}.ok"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["_libgcc_mutex=0.1=conda_forge", "_openmp_mutex=4.5=2_gnu", "_r-mutex=1.0.1=anacondar_1", "alsa-lib=1.2.8=h166bdaf_0", "binutils_impl_linux-64=2.39=he00db2b_1", "biopython=1.68=py27_0", "blast=2.9.0=pl526he19e7b1_7", "bwidget=1.9.14=ha770c72_1", "bzip2=1.0.8=h7f98852_4", "c-ares=1.18.1=h7f98852_0", "ca-certificates=2022.9.24=ha878542_0", "cairo=1.16.0=ha61ee94_1014", "certifi=2019.11.28=py27h8c360ce_1", "curl=7.86.0=h2283fc2_1", "entrez-direct=16.2=he881be0_1", "expat=2.5.0=h27087fc_0", "font-ttf-dejavu-sans-mono=2.37=hab24e00_0", "font-ttf-inconsolata=3.000=h77eed37_0", "font-ttf-source-code-pro=2.038=h77eed37_0", "font-ttf-ubuntu=0.83=hab24e00_0", "fontconfig=2.14.1=hc2a2eb6_0", "fonts-conda-ecosystem=1=0", "fonts-conda-forge=1=0", "freetype=2.12.1=hca18f0e_1", "fribidi=1.0.10=h36c2ea0_0", "gcc_impl_linux-64=12.2.0=hcc96c02_19", "gettext=0.21.1=h27087fc_0", "gfortran_impl_linux-64=12.2.0=h55be85b_19", "giflib=5.2.1=h36c2ea0_2", "graphite2=1.3.13=h58526e2_1001", "gsl=2.7=he838d99_0", "gxx_impl_linux-64=12.2.0=hcc96c02_19", "harfbuzz=5.3.0=h418a68e_0", "hmmer=3.2.1=he1b5a44_2", "icu=70.1=h27087fc_0", "infernal=1.1.4=h779adbc_0", "jpeg=9e=h166bdaf_2", "kernel-headers_linux-64=2.6.32=he073ed8_15", "keyutils=1.6.1=h166bdaf_0", "krb5=1.19.3=h08a2579_0", "lcms2=2.14=h6ed2654_0", "ld_impl_linux-64=2.39=hcc3a1bd_1", "lerc=4.0.0=h27087fc_0", "libblas=3.9.0=16_linux64_openblas", "libcblas=3.9.0=16_linux64_openblas", "libcups=2.3.3=h3e49a29_2", "libcurl=7.86.0=h2283fc2_1", "libdeflate=1.14=h166bdaf_0", "libedit=3.1.20191231=he28a2e2_2", "libev=4.33=h516909a_1", "libffi=3.4.2=h7f98852_5", "libgcc-devel_linux-64=12.2.0=h3b97bd3_19", "libgcc-ng=12.2.0=h65d4601_19", "libgfortran-ng=12.2.0=h69a702a_19", "libgfortran5=12.2.0=h337968e_19", "libglib=2.74.1=h606061b_1", "libgomp=12.2.0=h65d4601_19", "libiconv=1.17=h166bdaf_0", "libidn2=2.3.4=h166bdaf_0", "liblapack=3.9.0=16_linux64_openblas", "libnghttp2=1.47.0=hff17c54_1", "libopenblas=0.3.21=pthreads_h78a6416_3", "libpng=1.6.39=h753d276_0", "libsanitizer=12.2.0=h46fd767_19", "libsqlite=3.40.0=h753d276_0", "libssh2=1.10.0=hf14f497_3", "libstdcxx-devel_linux-64=12.2.0=h3b97bd3_19", "libstdcxx-ng=12.2.0=h46fd767_19", "libtiff=4.4.0=h55922b4_4", "libunistring=0.9.10=h7f98852_0", "libuuid=2.32.1=h7f98852_1000", "libwebp-base=1.2.4=h166bdaf_0", "libxcb=1.13=h7f98852_1004", "libxml2=2.10.3=h7463322_0", "libzlib=1.2.13=h166bdaf_4", "make=4.3=hd18ef5c_1", "mitos=2.1.0=pyhdfd78af_0", "mmtf-python=1.0.2=py27_0", "msgpack-python=1.0.0=py27h9e3301b_1", "ncurses=6.3=h27087fc_1", "numpy=1.16.5=py27h95a1406_0", "olefile=0.46=pyh9f0ad1d_1", "openjdk=17.0.3=hafdced1_4", "openssl=3.0.7=h166bdaf_0", "pango=1.50.12=h382ae3d_0", "pcre=8.45=h9c3ff4c_0", "pcre2=10.40=hc3806b6_0", "perl=5.26.2=h36c2ea0_1008", "perl-archive-tar=2.32=pl526_0", "perl-carp=1.38=pl526_3", "perl-common-sense=3.74=pl526_2", "perl-compress-raw-bzip2=2.087=pl526he1b5a44_0", "perl-compress-raw-zlib=2.087=pl526hc9558a2_0", "perl-exporter=5.72=pl526_1", "perl-exporter-tiny=1.002001=pl526_0", "perl-extutils-makemaker=7.36=pl526_1", "perl-io-compress=2.087=pl526he1b5a44_0", "perl-io-zlib=1.10=pl526_2", "perl-json=4.02=pl526_0", "perl-json-xs=2.34=pl526h6bb024c_3", "perl-list-moreutils=0.428=pl526_1", "perl-list-moreutils-xs=0.428=pl526_0", "perl-pathtools=3.75=pl526h14c3975_1", "perl-scalar-list-utils=1.52=pl526h516909a_0", "perl-types-serialiser=1.0=pl526_2", "perl-xsloader=0.24=pl526_0", "pillow=6.2.1=py27h34e0f95_0", "pip=20.1.1=pyh9f0ad1d_0", "pixman=0.40.0=h36c2ea0_0", "pthread-stubs=0.4=h36c2ea0_1001", "python=2.7.18=h42bf7aa_3", "python_abi=2.7=1_cp27mu", "r-backports=1.4.1=r42h06615bd_1", "r-base=4.2.2=hb87df5d_1", "r-brio=1.1.3=r42h06615bd_1", "r-callr=3.7.3=r42hc72bb7e_0", "r-cli=3.4.1=r42h7525677_1", "r-colorspace=2.0_3=r42h06615bd_1", "r-crayon=1.5.2=r42hc72bb7e_1", "r-desc=1.4.2=r42hc72bb7e_1", "r-diffobj=0.3.5=r42h06615bd_1", "r-digest=0.6.30=r42h7525677_0", "r-ellipsis=0.3.2=r42h06615bd_1", "r-evaluate=0.18=r42hc72bb7e_0", "r-fansi=1.0.3=r42h06615bd_1", "r-farver=2.1.1=r42h7525677_1", "r-fs=1.5.2=r42h7525677_2", "r-ggplot2=3.4.0=r42hc72bb7e_0", "r-glue=1.6.2=r42h06615bd_1", "r-gtable=0.3.1=r42hc72bb7e_1", "r-isoband=0.2.6=r42h7525677_1", "r-jsonlite=1.8.3=r42h06615bd_0", "r-labeling=0.4.2=r42hc72bb7e_2", "r-lattice=0.20_45=r42h06615bd_1", "r-lifecycle=1.0.3=r42hc72bb7e_1", "r-magrittr=2.0.3=r42h06615bd_1", "r-mass=7.3_58.1=r42h06615bd_1", "r-matrix=1.5_3=r42h5f7b363_0", "r-mgcv=1.8_41=r42h5f7b363_0", "r-munsell=0.5.0=r42hc72bb7e_1005", "r-nlme=3.1_160=r42h8da6f51_0", "r-pillar=1.8.1=r42hc72bb7e_1", "r-pkgconfig=2.0.3=r42hc72bb7e_2", "r-pkgload=1.3.2=r42hc72bb7e_0", "r-plyr=1.8.8=r42h7525677_0", "r-praise=1.0.0=r42hc72bb7e_1006", "r-processx=3.8.0=r42h06615bd_0", "r-ps=1.7.2=r42h06615bd_0", "r-r6=2.5.1=r42hc72bb7e_1", "r-rcolorbrewer=1.1_3=r42h785f33e_1", "r-rcpp=1.0.9=r42h7525677_2", "r-rematch2=2.1.2=r42hc72bb7e_2", "r-reshape2=1.4.4=r42h7525677_2", "r-rlang=1.0.6=r42h7525677_1", "r-rprojroot=2.0.3=r42hc72bb7e_1", "r-scales=1.2.1=r42hc72bb7e_1", "r-stringi=1.7.8=r42h30a9eb7_1", "r-stringr=1.4.1=r42hc72bb7e_1", "r-testthat=3.1.5=r42h7525677_1", "r-tibble=3.1.8=r42h06615bd_1", "r-utf8=1.2.2=r42h06615bd_1", "r-vctrs=0.5.1=r42h7525677_0", "r-viridislite=0.4.1=r42hc72bb7e_1", "r-waldo=0.4.0=r42hc72bb7e_1", "r-withr=2.5.0=r42hc72bb7e_1", "readline=8.1.2=h0f457ee_0", "reportlab=3.5.42=py27heca39a3_0", "sed=4.8=he412f7d_0", "setuptools=44.0.0=py27_0", "sqlite=3.40.0=h4ff8645_0", "sysroot_linux-64=2.12=he073ed8_15", "tk=8.6.12=h27826a3_0", "tktable=2.10=hb7b940f_3", "viennarna=1.8.5=h470a237_1", "wget=1.20.3=ha35d2d1_1", "wheel=0.37.1=pyhd8ed1ab_0", "xorg-fixesproto=5.0=h7f98852_1002", "xorg-inputproto=2.3.2=h7f98852_1002", "xorg-kbproto=1.0.7=h7f98852_1002", "xorg-libice=1.0.10=h7f98852_0", "xorg-libsm=1.2.3=hd9c2040_1000", "xorg-libx11=1.7.2=h7f98852_0", "xorg-libxau=1.0.9=h7f98852_0", "xorg-libxdmcp=1.1.3=h7f98852_0", "xorg-libxext=1.3.4=h7f98852_1", "xorg-libxfixes=5.0.3=h7f98852_1004", "xorg-libxi=1.7.10=h7f98852_0", "xorg-libxrender=0.9.10=h7f98852_1003", "xorg-libxt=1.2.1=h7f98852_2", "xorg-libxtst=1.2.3=h7f98852_1002", "xorg-recordproto=1.14.2=h7f98852_1002", "xorg-renderproto=0.11.1=h7f98852_1002", "xorg-xextproto=7.3.0=h7f98852_1002", "xorg-xproto=7.0.31=h7f98852_1007", "xz=5.2.6=h166bdaf_0", "zlib=1.2.13=h166bdaf_4", "zstd=1.5.2=h6239696_4", "barrnap=0.9"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span><span class=\"nv\">FAS</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span>results/assembled_sequence/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.fasta<span class=\"k\">)</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span>-e<span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span><span class=\"k\">$(</span>grep<span class=\"w\"> </span>circular<span class=\"w\"> </span>-c<span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"k\">)</span><span class=\"w\"> </span>-eq<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">                </span><span class=\"nb\">echo</span><span class=\"w\"> </span>Treating<span class=\"w\"> </span>mitochondrial<span class=\"w\"> </span>seqeunce<span class=\"w\"> </span>as<span class=\"w\"> </span>circular<span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">                </span>runmitos.py<span class=\"w\">                     </span>--input<span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"w\">                     </span>--code<span class=\"w\"> </span><span class=\"o\">{</span>params.code<span class=\"o\">}</span><span class=\"w\">                     </span>--outdir<span class=\"w\"> </span>results/annotations/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>/<span class=\"w\">                     </span>--refseqver<span class=\"w\"> </span>resources/mitos_db/<span class=\"o\">{</span>params.refseq<span class=\"o\">}</span><span class=\"w\">                     </span>--refdir<span class=\"w\"> </span>.<span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">            </span><span class=\"k\">else</span>\n<span class=\"w\">                </span><span class=\"nb\">echo</span><span class=\"w\"> </span>Treating<span class=\"w\"> </span>mitochndrial<span class=\"w\"> </span>seqeunce<span class=\"w\"> </span>as<span class=\"w\"> </span>linear<span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">                </span>runmitos.py<span class=\"w\">                     </span>--input<span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"w\">                     </span>--code<span class=\"w\"> </span><span class=\"o\">{</span>params.code<span class=\"o\">}</span><span class=\"w\">                     </span>--outdir<span class=\"w\"> </span>results/annotations/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>/<span class=\"w\">                     </span>--refseqver<span class=\"w\"> </span>resources/mitos_db/<span class=\"o\">{</span>params.refseq<span class=\"o\">}</span><span class=\"w\">                     </span>--refdir<span class=\"w\"> </span>.<span class=\"w\">                     </span>--linear<span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">            </span><span class=\"k\">fi</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"nb\">echo</span><span class=\"w\"> </span>No<span class=\"w\"> </span>assembled<span class=\"w\"> </span>sequence<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span><span class=\"k\">fi</span>\n<span class=\"w\">        </span>touch<span class=\"w\"> </span><span class=\"o\">{</span>output.ok<span class=\"o\">}</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 25}, "mitos_db": {"input": ["resources/taxdump", "resources/taxdump/citations.dmp", "resources/taxdump/delnodes.dmp", "resources/taxdump/division.dmp", "resources/taxdump/excludedfromtype.dmp", "resources/taxdump/fullnamelineage.dmp", "resources/taxdump/gencode.dmp", "resources/taxdump/host.dmp", "resources/taxdump/images.dmp", "resources/taxdump/merged.dmp", "resources/taxdump/names.dmp", "resources/taxdump/nodes.dmp", "resources/taxdump/rankedlineage.dmp", "resources/taxdump/taxidlineage.dmp", "resources/taxdump/typematerial.dmp", "resources/taxdump/typeoftype.dmp"], "output": ["resources/mitos_db/{mitos_refseq}"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["snakemake-minimal =8.4.12", "jinja2 =3.1.2", "networkx =3.1", "matplotlib =3.7.1", "graphviz =8.0.5", "pandas =2.0.1"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span>wget<span class=\"w\"> </span>--wait<span class=\"w\"> </span><span class=\"m\">10</span><span class=\"w\"> </span>--random-wait<span class=\"w\"> </span>-P<span class=\"w\"> </span>resources/mitos_db<span class=\"w\"> </span>https://zenodo.org/record/4284483/files/<span class=\"o\">{</span>params.refseq<span class=\"o\">}</span>.tar.bz2<span class=\"w\">  </span><span class=\"p\">&amp;</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span>tar<span class=\"w\"> </span>xf<span class=\"w\"> </span>resources/mitos_db/<span class=\"o\">{</span>params.refseq<span class=\"o\">}</span>.tar.bz2<span class=\"w\"> </span>--directory<span class=\"w\"> </span>resources/mitos_db<span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span>rm<span class=\"w\"> </span>resources/mitos_db/<span class=\"o\">{</span>params.refseq<span class=\"o\">}</span>.tar.bz2<span class=\"w\"> </span>&gt;&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 1}, "assess_assembly": {"input": ["results/assembled_sequence/{sample}.ok", "results/annotations/{sample}/{sample}.ok", "results/minimap/{sample}.ok"], "output": ["results/assess_assembly/{sample}.ok"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["pandas =1.5.2", "pysam =0.20.0", "matplotlib =3.7.0"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span><span class=\"nv\">FAS</span><span class=\"o\">=</span><span class=\"k\">$(</span><span class=\"nb\">echo</span><span class=\"w\"> </span>results/assembled_sequence/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.fasta<span class=\"k\">)</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span>-e<span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span><span class=\"k\">$(</span>grep<span class=\"w\"> </span>-e<span class=\"w\"> </span><span class=\"s2\">&quot;^&gt;&quot;</span><span class=\"w\"> </span>-c<span class=\"w\"> </span><span class=\"nv\">$FAS</span><span class=\"k\">)</span><span class=\"w\"> </span>-eq<span class=\"w\"> </span><span class=\"m\">1</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">                </span><span class=\"nb\">echo</span><span class=\"w\"> </span>Single<span class=\"w\"> </span>sequence<span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>fasta<span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">                </span>python<span class=\"w\"> </span>workflow/scripts/assess_assembly.py<span class=\"w\">                     </span>--fasta<span class=\"w\"> </span>results/assembled_sequence/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.fasta<span class=\"w\">                     </span>--bam<span class=\"w\"> </span>results/minimap/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.bam<span class=\"w\">                     </span>--bed<span class=\"w\"> </span>results/annotations/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>/result.bed<span class=\"w\">                     </span>--sample<span class=\"w\"> </span><span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\">                     </span>--output<span class=\"w\"> </span>results/assess_assembly/\n<span class=\"w\">            </span><span class=\"k\">else</span>\n<span class=\"w\">                </span><span class=\"nb\">echo</span><span class=\"w\"> </span>More<span class=\"w\"> </span>than<span class=\"w\"> </span>one<span class=\"w\"> </span>sequence<span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>fasta<span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">                </span><span class=\"c1\"># mitos creates subdirectories for each contig</span>\n<span class=\"w\">                </span><span class=\"c1\"># find bed files and cat</span>\n<span class=\"w\">                </span>find<span class=\"w\"> </span>results/annotations/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>/<span class=\"w\"> </span>-type<span class=\"w\"> </span>f<span class=\"w\"> </span>-name<span class=\"w\"> </span>result.bed<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"nb\">read</span><span class=\"w\"> </span>line<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">do</span><span class=\"w\">  </span>cat<span class=\"w\"> </span><span class=\"nv\">$line</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">done</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span>results/assess_assembly/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.bed\n\n<span class=\"w\">                </span>python<span class=\"w\"> </span>workflow/scripts/assess_assembly.py<span class=\"w\">                     </span>--fasta<span class=\"w\"> </span>results/assembled_sequence/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.fasta<span class=\"w\">                     </span>--bam<span class=\"w\"> </span>results/minimap/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.bam<span class=\"w\">                     </span>--bed<span class=\"w\"> </span>results/assess_assembly/<span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span>.bed<span class=\"w\">                     </span>--sample<span class=\"w\"> </span><span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\">                     </span>--output<span class=\"w\"> </span>results/assess_assembly/\n<span class=\"w\">            </span><span class=\"k\">fi</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"nb\">echo</span><span class=\"w\"> </span>No<span class=\"w\"> </span>assembled<span class=\"w\"> </span>sequence<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">{</span>wildcards.sample<span class=\"o\">}</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span><span class=\"k\">fi</span>\n<span class=\"w\">        </span>touch<span class=\"w\"> </span><span class=\"o\">{</span>output.ok<span class=\"o\">}</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 25}, "gene_counts": {"input": ["<function>"], "output": ["results/summary/summary_gene_counts.txt"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["snakemake-minimal =8.4.12", "jinja2 =3.1.2", "networkx =3.1", "matplotlib =3.7.1", "graphviz =8.0.5", "pandas =2.0.1"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span>python3<span class=\"w\"> </span>workflow/scripts/gene_counts.py<span class=\"w\"> </span>--input<span class=\"w\"> </span>results/mafft_filtered/<span class=\"w\"> </span>--output<span class=\"w\"> </span><span class=\"o\">{</span>output<span class=\"o\">}</span><span class=\"w\">  </span><span class=\"p\">&amp;</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 1}, "filter_alignments": {"input": ["results/mafft/{dataset}.fasta"], "output": ["results/mafft_filtered/{dataset}.fasta"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["snakemake-minimal =8.4.12", "jinja2 =3.1.2", "networkx =3.1", "matplotlib =3.7.1", "graphviz =8.0.5", "pandas =2.0.1"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span>python<span class=\"w\"> </span>workflow/scripts/alignments_filter.py<span class=\"w\"> </span>--input<span class=\"w\"> </span><span class=\"o\">{</span>input<span class=\"o\">}</span><span class=\"w\"> </span>--output<span class=\"w\"> </span><span class=\"o\">{</span>output<span class=\"o\">}</span><span class=\"w\"> </span>--threshold<span class=\"w\"> </span><span class=\"o\">{</span>params.threshold<span class=\"o\">}</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 15}, "mafft": {"input": ["results/annotated_genes/{dataset}.fasta"], "output": ["results/mafft/{dataset}.fasta"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["mafft =7.508"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span>mafft<span class=\"w\">             </span>--maxiterate<span class=\"w\"> </span><span class=\"m\">1000</span><span class=\"w\">             </span>--globalpair<span class=\"w\">             </span>--adjustdirectionaccurately<span class=\"w\">             </span><span class=\"o\">{</span>input<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"m\">1</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>output<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"m\">2</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 15}, "final_log": {"input": ["<function>"], "output": ["results/snakemake.ok"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["snakemake-minimal =8.4.12", "jinja2 =3.1.2", "networkx =3.1", "matplotlib =3.7.1", "graphviz =8.0.5", "pandas =2.0.1"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span>touch<span class=\"w\"> </span><span class=\"o\">{</span>output<span class=\"o\">}</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 1}, "plot_tree": {"input": ["results/iqtree/{dataset}.treefile.rooted.newick"], "output": ["results/plot_tree/{dataset}.png"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["r-base =4.3.2", "r-tidyverse", "bioconductor-ggtree =3.8.0"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span>\n<span class=\"normal\">8</span>\n<span class=\"normal\">9</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\"># check if file empty</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span>-s<span class=\"w\"> </span><span class=\"o\">{</span>input<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">           </span><span class=\"c1\"># file not empty</span>\n<span class=\"w\">            </span>Rscript<span class=\"w\"> </span>workflow/scripts/plot_tree.R<span class=\"w\"> </span><span class=\"o\">{</span>input.tree<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span>output.png<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span>params.height<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span>params.width<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">           </span><span class=\"c1\"># file empty</span>\n<span class=\"w\">           </span>touch<span class=\"w\"> </span><span class=\"o\">{</span>output<span class=\"o\">}</span>\n<span class=\"w\">        </span><span class=\"k\">fi</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 15}, "root_iqtree": {"input": ["results/iqtree/{dataset}.treefile"], "output": ["results/iqtree/{dataset}.treefile.rooted.newick"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["ete3 =3.1.1", "xvfbwrapper =0.2.9"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\">1</span>\n<span class=\"normal\">2</span>\n<span class=\"normal\">3</span>\n<span class=\"normal\">4</span>\n<span class=\"normal\">5</span>\n<span class=\"normal\">6</span>\n<span class=\"normal\">7</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span><span class=\"o\">{</span>params.outgroup<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s2\">&quot;NA&quot;</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span>!<span class=\"w\"> </span>-s<span class=\"w\"> </span><span class=\"o\">{</span>input.tree<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span><span class=\"nb\">echo</span><span class=\"w\"> </span><span class=\"s2\">&quot;Outgroup not specified. Leaving as unrooted&quot;</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">            </span>cp<span class=\"w\"> </span><span class=\"o\">{</span>input.tree<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span>output.tree<span class=\"o\">}</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span>python<span class=\"w\"> </span>workflow/scripts/root_newick.py<span class=\"w\">                 </span>--input<span class=\"w\"> </span><span class=\"o\">{</span>input.tree<span class=\"o\">}</span><span class=\"w\">                 </span>--output<span class=\"w\"> </span><span class=\"o\">{</span>output.tree<span class=\"o\">}</span><span class=\"w\">                 </span>--outgroup<span class=\"w\"> </span><span class=\"o\">{</span>params.outgroup<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span><span class=\"k\">fi</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 15}, "iqtree": {"input": ["results/alignment_trim/{dataset}.fasta"], "output": ["results/iqtree/{dataset}.treefile", "results/iqtree/{dataset}.fasta"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["iqtree =2.2.0.3"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\"># remove special characters from sample names</span>\n<span class=\"w\">        </span>sed<span class=\"w\"> </span>-e<span class=\"w\"> </span><span class=\"s1\">&#39;s/;/_/g&#39;</span><span class=\"w\"> </span>-e<span class=\"w\"> </span><span class=\"s1\">&#39;s/+//g&#39;</span><span class=\"w\">             </span><span class=\"o\">{</span>input.fasta<span class=\"o\">}</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>output.fasta_renamed<span class=\"o\">}</span>\n\n<span class=\"w\">        </span><span class=\"c1\"># iqtree will not bootstrap if less than 5 samples in alignment</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span><span class=\"k\">$(</span>grep<span class=\"w\"> </span>-c<span class=\"w\"> </span><span class=\"s2\">&quot;^&gt;&quot;</span><span class=\"w\"> </span><span class=\"o\">{</span>input.fasta<span class=\"o\">}</span><span class=\"k\">)</span><span class=\"w\"> </span>-lt<span class=\"w\"> </span><span class=\"s2\">&quot;5&quot;</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span><span class=\"k\">$(</span>grep<span class=\"w\"> </span>-e<span class=\"w\"> </span><span class=\"s2\">&quot;^&gt;&quot;</span><span class=\"w\"> </span>-v<span class=\"w\"> </span><span class=\"o\">{</span>input.fasta<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>sort<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>uniq<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>wc<span class=\"w\"> </span>-l<span class=\"k\">)</span><span class=\"w\">  </span>-lt<span class=\"w\"> </span><span class=\"m\">5</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span>touch<span class=\"w\"> </span><span class=\"o\">{</span>output.tree<span class=\"o\">}</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span>iqtree<span class=\"w\"> </span>-s<span class=\"w\"> </span><span class=\"o\">{</span>output.fasta_renamed<span class=\"o\">}</span><span class=\"w\"> </span>-B<span class=\"w\"> </span><span class=\"m\">1000</span><span class=\"w\"> </span>--prefix<span class=\"w\"> </span>results/iqtree/<span class=\"o\">{</span>wildcards.dataset<span class=\"o\">}</span><span class=\"w\"> </span>-redo<span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">        </span><span class=\"k\">fi</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 15}, "alignment_trim": {"input": ["results/mafft_filtered/{dataset}.fasta"], "output": ["results/alignment_trim/{dataset}.fasta"], "conda_env": {"channels": ["conda-forge", "bioconda", "defaults"], "dependencies": ["gblocks =0.91b", "clipkit =1.3.0"]}, "container_img_url": null, "code": "<div class=\"source\"><table class=\"sourcetable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre><span class=\"normal\"> 1</span>\n<span class=\"normal\"> 2</span>\n<span class=\"normal\"> 3</span>\n<span class=\"normal\"> 4</span>\n<span class=\"normal\"> 5</span>\n<span class=\"normal\"> 6</span>\n<span class=\"normal\"> 7</span>\n<span class=\"normal\"> 8</span>\n<span class=\"normal\"> 9</span>\n<span class=\"normal\">10</span>\n<span class=\"normal\">11</span>\n<span class=\"normal\">12</span>\n<span class=\"normal\">13</span>\n<span class=\"normal\">14</span>\n<span class=\"normal\">15</span>\n<span class=\"normal\">16</span>\n<span class=\"normal\">17</span>\n<span class=\"normal\">18</span>\n<span class=\"normal\">19</span>\n<span class=\"normal\">20</span></pre></div></td><td class=\"code\"><div><pre><span></span><code><span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">[</span><span class=\"w\"> </span><span class=\"k\">$(</span>grep<span class=\"w\"> </span>-c<span class=\"w\"> </span><span class=\"s2\">&quot;^&gt;&quot;</span><span class=\"w\"> </span><span class=\"o\">{</span>input.fasta<span class=\"o\">}</span><span class=\"k\">)</span><span class=\"w\"> </span>-lt<span class=\"w\"> </span><span class=\"s2\">&quot;5&quot;</span><span class=\"w\"> </span><span class=\"o\">]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">            </span>cp<span class=\"w\"> </span><span class=\"o\">{</span>input.fasta<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span>output.fasta<span class=\"o\">}</span>\n<span class=\"w\">        </span><span class=\"k\">else</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"w\"> </span><span class=\"o\">{</span>params.trim<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s2\">&quot;gblocks&quot;</span><span class=\"w\"> </span><span class=\"o\">]]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">                </span><span class=\"c1\"># gblocks add reuslts to same dir as input</span>\n<span class=\"w\">                </span>cp<span class=\"w\"> </span><span class=\"o\">{</span>input.fasta<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">{</span>params.tmp<span class=\"o\">}</span>\n<span class=\"w\">                </span><span class=\"c1\"># gblocks always gives error code of 1. Ignore.</span>\n<span class=\"w\">                </span>Gblocks<span class=\"w\"> </span><span class=\"o\">{</span>params.tmp<span class=\"o\">}</span><span class=\"w\"> </span>-t<span class=\"o\">=</span>d<span class=\"w\"> </span>-b4<span class=\"o\">=</span><span class=\"m\">5</span><span class=\"w\"> </span>-b5<span class=\"o\">=</span>h<span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"nb\">true</span>\n<span class=\"w\">                </span><span class=\"c1\"># sed to remove gaps</span>\n<span class=\"w\">                </span>sed<span class=\"w\"> </span><span class=\"s1\">&#39;s/ //g&#39;</span><span class=\"w\"> </span><span class=\"o\">{</span>params.tmp<span class=\"o\">}</span>-gb<span class=\"w\"> </span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>output.fasta<span class=\"o\">}</span>\n<span class=\"w\">                </span><span class=\"c1\"># rm tmp</span>\n<span class=\"w\">                </span>rm<span class=\"w\"> </span><span class=\"o\">{</span>params.tmp<span class=\"o\">}</span>\n<span class=\"w\">                </span>rm<span class=\"w\"> </span><span class=\"o\">{</span>params.tmp<span class=\"o\">}</span>-gb\n<span class=\"w\">            </span><span class=\"k\">else</span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">[[</span><span class=\"w\"> </span><span class=\"o\">{</span>params.trim<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s2\">&quot;clipkit&quot;</span><span class=\"w\"> </span><span class=\"o\">]]</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"k\">then</span>\n<span class=\"w\">                    </span>clipkit<span class=\"w\"> </span><span class=\"o\">{</span>input.fasta<span class=\"o\">}</span><span class=\"w\"> </span>-o<span class=\"w\"> </span><span class=\"o\">{</span>output.fasta<span class=\"o\">}</span><span class=\"w\"> </span><span class=\"p\">&amp;</span>&gt;<span class=\"w\"> </span><span class=\"o\">{</span>log<span class=\"o\">}</span>\n<span class=\"w\">                </span><span class=\"k\">fi</span>\n<span class=\"w\">            </span><span class=\"k\">fi</span>\n<span class=\"w\">        </span><span class=\"k\">fi</span>\n<span class=\"w\">        </span>\n</code></pre></div></td></tr></table></div>\n", "n_jobs": 15}};
